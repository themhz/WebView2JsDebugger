{"version":3,"file":"remediation-tool-free.js","sources":["../../../assets/remediation/src/constants/excluded-elements.ts","../../../assets/remediation/src/common/dom-observers/mutation-filters/prefilter.ts","../../../assets/remediation/src/common/api/remediation-consolidated.ts","../../../assets/remediation/src/common/config/constants.ts","../../../assets/remediation/src/common/config/config.ts","../../../assets/remediation/src/constants/base-api.ts","../../../assets/remediation/src/common/api/on-post-message.ts","../../../assets/remediation/src/common/dom-observers/main-observer.ts","../../../assets/remediation/src/utils/get-all-elements/get-all-elements.ts","../../../node_modules/lodash-es/_freeGlobal.js","../../../node_modules/lodash-es/_root.js","../../../node_modules/lodash-es/_Symbol.js","../../../node_modules/lodash-es/_getRawTag.js","../../../node_modules/lodash-es/_objectToString.js","../../../node_modules/lodash-es/_baseGetTag.js","../../../node_modules/lodash-es/isSymbol.js","../../../node_modules/lodash-es/_trimmedEndIndex.js","../../../node_modules/lodash-es/_baseTrim.js","../../../node_modules/lodash-es/isObject.js","../../../node_modules/lodash-es/toNumber.js","../../../node_modules/lodash-es/isObjectLike.js","../../../node_modules/lodash-es/now.js","../../../node_modules/lodash-es/debounce.js","../../../assets/remediation/src/common/performance-control/use-deferred-runner.ts","../../../assets/remediation/src/constants/timers.ts","../../../node_modules/lodash-es/throttle.js","../../../packages/uw-utils/src/get-labelled-by-elements.ts","../../../packages/uw-utils/src/hash-string.ts","../../../packages/uw-utils/src/xpath.ts","../../../packages/uw-utils/src/normalize-src.ts","../../../packages/uw-utils/src/find-label-for-control-element.ts","../../../assets/remediation/src/common/accessibility-tree-observer/types.ts","../../../assets/remediation/src/types/element.ts","../../../assets/remediation/src/common/accessibility-tree-observer/constants.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-control-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/build-accessibility-tree-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-text-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-composed-text-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-hidden-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-heading-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-landmark-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-node-with-alt.ts","../../../assets/remediation/src/common/accessibility-tree-observer/build-accessibility-tree-node/process-unknown-node.ts","../../../assets/remediation/src/common/accessibility-tree-observer/post-message-api.ts","../../../packages/uw-utils/src/post-message.ts","../../../assets/remediation/src/common/accessibility-tree-observer/accessibility-tree-observer-control.ts","../../../assets/remediation/src/common/accessibility-tree-observer/accessibility-tree-observer.ts","../../../assets/remediation/src/common/rules/image-alt/constants.ts","../../../assets/remediation/src/common/rules/aria-editor/constants.ts","../../../assets/remediation/src/common/remediation-manager/remediation-manager.ts","../../../assets/remediation/src/utils/get-rule-config-name/get-rule-config-name.ts","../../../assets/remediation/src/common/rules/empty-controls/constants.ts","../../../assets/remediation/src/common/rules/form-label/constants.ts","../../../assets/remediation/src/index.ts","../../../assets/remediation/src/common/rules/rule-factory/create-remediation-rule.ts","../../../assets/remediation/src/common/rules/image-alt/utils/image-utils.ts","../../../assets/remediation/src/common/rules/image-alt/utils/is-existing-alt-invalid.ts","../../../assets/remediation/src/common/rules/image-alt/apply-corrections.ts","../../../assets/remediation/src/common/rules/image-alt/utils/is-image-size-detectable.ts","../../../assets/remediation/src/common/rules/image-alt/utils/should-be-decorative.ts","../../../assets/remediation/src/common/rules/image-alt/utils/has-wrong-src.ts","../../../assets/remediation/src/common/rules/image-alt/utils/is-excluded-domain-image.ts","../../../assets/remediation/src/common/rules/image-alt/utils/has-wrong-aspect-ratio.ts","../../../assets/remediation/src/common/rules/image-alt/utils/relevant-text-storage.ts","../../../assets/remediation/src/common/rules/image-alt/utils/process-images.ts","../../../assets/remediation/src/common/remediation-result/remediation-result.ts","../../../assets/remediation/src/common/rules/image-alt/post-message-api.ts","../../../assets/remediation/src/common/api/missing-alt.ts","../../../assets/remediation/src/utils/strip-url-parameters.ts","../../../assets/remediation/src/common/rules/image-alt/types.ts","../../../assets/remediation/src/common/rules/image-alt/utils/remove-newlines-spaces.ts","../../../assets/remediation/src/common/rules/image-alt/utils/get-sibling-node.ts","../../../assets/remediation/src/common/rules/image-alt/utils/is-allowed-node.ts","../../../assets/remediation/src/common/rules/image-alt/utils/get-alt-text-from-node.ts","../../../assets/remediation/src/common/rules/image-alt/utils/filter-nodes.ts","../../../assets/remediation/src/common/rules/image-alt/utils/get-alt-from-closest-text-node.ts","../../../assets/remediation/src/common/rules/image-alt/utils/get-alt-from-siblings.ts","../../../assets/remediation/src/common/rules/image-alt/create-alt-from-relevant-text.ts","../../../assets/remediation/src/common/rules/image-alt/utils/search-in-attributes-dictionary.ts","../../../assets/remediation/src/common/rules/image-alt/utils/prepare-missing-alt-data.ts","../../../assets/remediation/src/common/rules/image-alt/utils/is-third-party-tech-image.ts","../../../assets/remediation/src/common/rules/image-alt/rule.ts","../../../assets/remediation/src/common/rules-list/rules-list-free.ts","../../../assets/remediation/src/common/rules/image-alt/create-rule.ts","../../../assets/remediation/src/common/rules/image-alt/is-target-element.ts"],"sourcesContent":["export const EXCLUDED_TAG_NAMES = [\n  'script',\n  'noscript',\n  'style',\n  'meta',\n  'link',\n  // svg elements:\n  'path',\n  'circle',\n  'rect',\n  'ellipse',\n  'line',\n  'polygon',\n  'polyline',\n  'g',\n];\n\nexport const DATA_UW_IGNORE = 'data-uw-ignore';\nexport const DATA_UW_ELEMENT = 'data-uw-rm-ignore';\n\nexport const EXCLUDED_ATTRIBUTES = [DATA_UW_IGNORE, DATA_UW_ELEMENT];\n","import { EXCLUDED_ATTRIBUTES, EXCLUDED_TAG_NAMES } from '../../../constants';\r\n\r\ninterface MutationCallback {\r\n  (mutations: MutationRecord[]): HTMLElement[];\r\n}\r\n\r\ninterface MutationFilter {\r\n  (mutation: MutationRecord, type: string): HTMLElement[];\r\n}\r\n\r\n// MUTATED NODES FILTER\r\nconst isNodeExcluded = (node: Node): boolean =>\r\n  !(node instanceof HTMLElement) ||\r\n  EXCLUDED_ATTRIBUTES.some((attr) => node.hasAttribute(attr)) ||\r\n  EXCLUDED_TAG_NAMES.includes(node.nodeName.toLowerCase());\r\n\r\n// MAIN DOM MUTATION FILTER\r\nconst mutationFilter: MutationFilter = (mutation, type) => {\r\n  if (type === 'childList')\r\n    return [].filter.call(\r\n      mutation.addedNodes,\r\n      (node: Node) => !isNodeExcluded(node),\r\n    );\r\n  if (type === 'attributes')\r\n    return isNodeExcluded(mutation.target)\r\n      ? []\r\n      : ([mutation.target] as HTMLElement[]);\r\n\r\n  return [];\r\n};\r\n\r\nexport const prefilter: MutationCallback = (mutations) => {\r\n  const sorted: HTMLElement[] = [];\r\n  for (const mutation of mutations) {\r\n    sorted.push(...mutationFilter(mutation, mutation.type));\r\n  }\r\n  return sorted;\r\n};\r\n","import { RemediationConfiguration } from '../../types/remediations-config';\n\nexport const getRemediationSettings = async (\n  jsonUrl: string,\n): Promise<RemediationConfiguration> => {\n  const response = await fetch(jsonUrl);\n  const json = await response.json();\n  return json;\n};\n","export const InitialRemediationConfig = {\n  AriaEditorValues: [],\n  BrokenLink: [],\n  Contrast: [],\n  EmptyControls: [],\n  ExternalLink: [],\n  Forms: [],\n  Headings: [],\n  Language: [],\n  MissingAlts: [],\n  Pdfs: [],\n  VagueLinks: [],\n};\n","import { getRemediationSettings } from '../api/remediation-consolidated';\nimport type { RemediationConfiguration } from '../../types/remediations-config';\nimport { InitialRemediationConfig } from './constants';\n\nexport const RemediationConfig =\n  UserWayWidgetApp.ContextHolder.config.remediation;\nexport const TuningsConfig = UserWayWidgetApp.ContextHolder.config.tunings;\nexport const ServicesConfig = UserWayWidgetApp.ContextHolder.config.services;\nexport const ImageAltConfig = UserWayWidgetApp.ContextHolder.config.imageAlt;\n\nlet RulesConfig: RemediationConfiguration = {} as RemediationConfiguration;\n\nexport function setRulesConfig(data: RemediationConfiguration): void {\n  RulesConfig = { ...data };\n}\n\nexport function getRulesConfig(): RemediationConfiguration {\n  return RulesConfig;\n}\n\nexport const initConfig = async (): Promise<void> => {\n  if (RemediationConfig?.consolidated) {\n    const config = await getRemediationSettings(RemediationConfig.consolidated);\n    // BE saves new updates as new element, so more relevant data will be the last => need reverse before find correction\n    config.MissingAlts.reverse();\n    setRulesConfig(config);\n    return;\n  }\n\n  // in case we do not have consolidated json link from BE, use empty config\n  setRulesConfig(InitialRemediationConfig);\n};\n","export const BASE_API = '__BASE_API__';\nexport const ENDPOINT_CDN = '__ENDPOINT_CDN__';\n\nexport const USERWAY_ADDR: string = '__USERWAY_ADDR__';\n\nexport enum PostMessageAction {\n  Remediation = 'remediation',\n  AriaEditor = 'aria-editor',\n}\n\nexport enum PostMessageType {\n  KeyboardNavEnabled = 'app-key-nav-enabled',\n}\n","import { PostMessageAction } from '../../constants/base-api';\n\nexport const onPostMessage = (\n  messageType: string,\n  callback: () => void,\n): (() => void) => {\n  const listener = (event: MessageEvent): void => {\n    const { data } = event;\n    const { isUserWay, action, type } = data;\n\n    if (\n      !isUserWay ||\n      action !== PostMessageAction.Remediation ||\n      type !== messageType\n    ) {\n      return;\n    }\n\n    callback();\n  };\n\n  window.addEventListener('message', listener);\n\n  const unubscribe = (): void => {\n    window.removeEventListener('message', listener);\n  };\n\n  return unubscribe;\n};\n","import { prefilter } from './mutation-filters/prefilter';\nimport { TuningsConfig } from '../config/config';\nimport { onPostMessage } from '../api/on-post-message';\nimport { PostMessageType } from '../../constants/base-api';\n\n// TODO FILL THE LIST WITH ATTRIBUTES ALLOWED TO OBSERVE\nconst allowed: string[] = ['aria-label', 'alt'];\nconst element: HTMLElement = document.documentElement;\nconst options = {\n  attributes: true,\n  attributeFilter: allowed,\n  childList: true,\n  subtree: true,\n};\n\nconst callbacksSet: Set<(nodes: HTMLElement[]) => void> = new Set();\n\nexport const subscribeOnDomUpdates = (\n  callback: (nodes: HTMLElement[]) => void,\n): void => {\n  callbacksSet.add(callback);\n};\n\nexport const unsubscribeFromDomUpdates = (\n  callback: (nodes: HTMLElement[]) => void,\n): void => {\n  callbacksSet.delete(callback);\n};\n\nconst observer: MutationObserver = new MutationObserver((domMutations) => {\n  const filteredNodes = prefilter(domMutations);\n  if (filteredNodes.length) {\n    callbacksSet.forEach((callbackFn) => callbackFn(filteredNodes));\n  }\n});\n\nexport const initDomObserver = (target = element, config = options): void => {\n  if (!TuningsConfig.tech_rem_on_tab) {\n    observer.observe(target, config);\n  }\n\n  const unsubscribe = onPostMessage(PostMessageType.KeyboardNavEnabled, () => {\n    observer.observe(target, config);\n    unsubscribe();\n  });\n};\n\nexport const disableDomObserver = (): void => {\n  observer.disconnect();\n};\n","import {\n  EXCLUDED_ATTRIBUTES,\n  EXCLUDED_TAG_NAMES,\n} from '../../constants/excluded-elements';\n\nexport const getAllElements = (): NodeListOf<HTMLElement> => {\n  const tagNamesList = EXCLUDED_TAG_NAMES.join(',');\n  const attrList = EXCLUDED_ATTRIBUTES.map((attr) => `[${attr}]`).join(',');\n  const query = `${tagNamesList},${attrList}`;\n  return document.body.querySelectorAll(`*:not(${query})`);\n};\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","import { throttle, debounce } from 'lodash-es';\nimport {\n  REMEDIATION_DEBOUNCE_DELAY,\n  REMEDIATION_THROTTLE_DELAY,\n  REMEDIATION_DEBOUNCE_MAX_WAIT,\n  REMEDIATION_MODE_SWITCH,\n} from '../../constants';\n\ninterface DeferredRunner {\n  run: (elements: HTMLElement[]) => void;\n}\n\nlet isActivePhase = true;\n\nexport const useDeferredRunner = (\n  runCallback: (elements: HTMLElement[]) => void,\n): DeferredRunner => {\n  setTimeout(() => {\n    isActivePhase = false;\n  }, REMEDIATION_MODE_SWITCH);\n\n  const throttleRemediationRun = throttle(\n    (elements): void => runCallback(elements),\n    REMEDIATION_THROTTLE_DELAY,\n    {\n      leading: true,\n      trailing: true,\n    },\n  );\n\n  const debounceRemediationRun = debounce(\n    (elements): void => runCallback(elements),\n    REMEDIATION_DEBOUNCE_DELAY,\n    {\n      maxWait: REMEDIATION_DEBOUNCE_MAX_WAIT,\n      leading: true,\n      trailing: true,\n    },\n  );\n\n  const run = (elements: HTMLElement[]): void =>\n    isActivePhase\n      ? throttleRemediationRun(elements)\n      : debounceRemediationRun(elements);\n\n  return { run };\n};\n","export const REMEDIATION_THROTTLE_DELAY = 300;\nexport const REMEDIATION_DEBOUNCE_DELAY = 500;\nexport const REMEDIATION_DEBOUNCE_MAX_WAIT = 2000;\nexport const REMEDIATION_MODE_SWITCH = 2000;\nexport const DEFAULT_REMEDIATION_TIMEOUT = 500;\n","import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","// getLabelledByElements function retrieves elements\n// based on the provided IDs in the aria-labelledby attribute\n// and generates a concatenated text taken from children elements\n\nconst isHidden = (element: Element): boolean => {\n  let style = window.getComputedStyle(element);\n  return style.display === 'none';\n};\n\nexport const isElementNode = (node: Node): boolean => {\n  return !['#text', '#comment'].includes(node.nodeName);\n};\n\nconst isHideFromReaders = (element: Element): boolean => {\n  if (!isElementNode(element)) {\n    return false;\n  }\n  let ariaHiddenAttribute = element.getAttribute('aria-hidden');\n  let hiddenAttribute = element.getAttribute('hidden');\n\n  return (\n    isHidden(element) ||\n    ariaHiddenAttribute === 'true' ||\n    (hiddenAttribute !== null && hiddenAttribute !== '')\n  );\n};\n\nconst invalidTags = ['NOSCRIPT', 'SCRIPT', 'style'];\n\nconst compose = (\n  children: NodeListOf<ChildNode>,\n  textAppendTo: string,\n): string => {\n  //this function will be reviewed and probably changed\n  for (let i = 0; i < children.length; i++) {\n    let childNode = children[i];\n    switch (childNode.nodeType) {\n      case Node.TEXT_NODE:\n        textAppendTo +=\n          ' ' + childNode.textContent?.trim().replace(/(\\n|\\r\\n)/g, '');\n        break;\n\n      case Node.ELEMENT_NODE:\n        if (\n          invalidTags.includes((childNode as Element).tagName) ||\n          isHideFromReaders(childNode as Element)\n        ) {\n          break;\n        }\n\n        const ariaHidden = (childNode as Element).getAttribute('aria-hidden'),\n          alt = (childNode as Element).getAttribute('alt'),\n          ariaLabel = (childNode as Element).getAttribute('aria-label');\n\n        if (!ariaHidden || ariaHidden === 'false') {\n          if (ariaLabel) {\n            textAppendTo += ' ' + ariaLabel;\n            break;\n          } else if (alt) {\n            textAppendTo += alt + ' ';\n          }\n          if ((childNode as Element).tagName !== 'IMG') {\n            compose((childNode as ChildNode).childNodes, textAppendTo);\n          }\n        }\n        break;\n    }\n  }\n  return textAppendTo;\n};\n\nexport const composeElementTextRepresentation = (\n  element: Element,\n  textAppendTo: string = '',\n): string => {\n  //this function will be reviewed and probably changed\n  let modifiedText = textAppendTo;\n  textAppendTo = compose(element.childNodes, modifiedText);\n\n  return textAppendTo.replace(/\\s+/g, ' ').trim();\n};\n\nexport const getLabelledByElements = (ariaLabelledBy: string): string => {\n  let ids = ariaLabelledBy.split(' '),\n    textToRead = '';\n  for (let i = 0; i < ids.length; i++) {\n    let labelEl = document.getElementById(ids[i]);\n    if (labelEl) {\n      textToRead = ' ' + composeElementTextRepresentation(labelEl, textToRead);\n    }\n  }\n  return textToRead;\n};\n","export const hashString = (str: string, seed: number = 0): number => {\r\n  let h1 = 0xdeadbeef ^ seed;\r\n  let h2 = 0x41c6ce57 ^ seed;\r\n\r\n  for (let i = 0, ch; i < str.length; i++) {\r\n    ch = str.charCodeAt(i);\r\n    h1 = Math.imul(h1 ^ ch, 2654435761);\r\n    h2 = Math.imul(h2 ^ ch, 1597334677);\r\n  }\r\n\r\n  h1 =\r\n    Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\r\n    Math.imul(h2 ^ (h2 >>> 13), 3266489909);\r\n\r\n  h2 =\r\n    Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\r\n    Math.imul(h1 ^ (h1 >>> 13), 3266489909);\r\n\r\n  return 4294967296 * (2097151 & h2) + (h1 >>> 0);\r\n};\r\n","import { hashString } from './hash-string';\r\n\r\nexport const xpath = (element: HTMLElement, isParentEl = false): string => {\r\n  if (element.nodeName.toLowerCase() === 'html') {\r\n    return '/HTML';\r\n  }\r\n\r\n  if (element.nodeName.toLowerCase() === 'body') {\r\n    return '/HTML/BODY';\r\n  }\r\n\r\n  if (element.nodeName.toLowerCase() === 'head') {\r\n    return '/HTML/HEAD';\r\n  }\r\n\r\n  let siblingIndex = 0;\r\n  const siblings = element.parentElement?.children;\r\n\r\n  if (!siblings) {\r\n    return '';\r\n  }\r\n\r\n  for (let i = 0; i < siblings.length; i++) {\r\n    let sibling = siblings[i];\r\n\r\n    if (sibling === element) {\r\n      return (\r\n        xpath(element.parentElement as HTMLElement, true) +\r\n        `/${element.tagName}[${siblingIndex + 1}]` +\r\n        (isParentEl ? '' : getHashedParams(element as HTMLElement))\r\n      );\r\n    }\r\n\r\n    if (sibling.tagName === element.tagName) {\r\n      siblingIndex++;\r\n    }\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\nfunction getHashedParams(element: HTMLElement): string {\r\n  const attributes = {\r\n    s: 'src',\r\n    h: 'href',\r\n  };\r\n\r\n  type AttributesKeys = keyof typeof attributes;\r\n\r\n  const textHash = element.innerText ? hashString(element.innerText) : '';\r\n\r\n  return (Object.keys(attributes) as AttributesKeys[]).reduce((result, key) => {\r\n    const attribute = attributes[key];\r\n    const attrValue = element.getAttribute(attribute) || '';\r\n\r\n    if (\r\n      !element.hasAttribute ||\r\n      !element.hasAttribute(attribute) ||\r\n      attrValue === ''\r\n    ) {\r\n      return result;\r\n    }\r\n\r\n    return result + ';' + key + ':' + hashString(attrValue);\r\n  }, '|' + textHash);\r\n}\r\n","const base64RE = new RegExp('^(data:)');\nconst includesImgExtensionRegex = new RegExp(\n  '(.)(gif|jpe?g|tiff?|png|webp|bmp)',\n  'i',\n);\n\nexport const normalizeSrc = (originalSrc: string) => {\n  if (base64RE.test(originalSrc)) {\n    return originalSrc;\n  }\n\n  if (!!originalSrc) {\n    originalSrc = originalSrc\n      .replace(/^(http|https)(:\\/\\/)/, '')\n      .replace(/^(www\\.)/, '');\n  }\n\n  const matches = originalSrc.match(includesImgExtensionRegex);\n\n  if (matches?.index && matches?.length) {\n    return originalSrc.substring(0, matches.index + matches[0].length);\n  }\n\n  return originalSrc.split('?')[0];\n};\n","import {\n  getLabelledByElements,\n  composeElementTextRepresentation,\n} from './get-labelled-by-elements';\n\nconst findParentLabel = (parentEl: HTMLElement | null): Element | null => {\n  if (!parentEl) return null;\n\n  if (parentEl.tagName === 'LABEL') {\n    return parentEl;\n  } else {\n    return findParentLabel(parentEl.parentNode as HTMLElement);\n  }\n};\n\nconst findLabelByForAttr = (id: string): Element | null => {\n  const labels = document.querySelectorAll('LABEL');\n\n  for (let i = 0; i < labels.length; i++) {\n    if ((labels[i] as HTMLLabelElement).htmlFor === id) {\n      return labels[i];\n    }\n  }\n\n  return null;\n};\n\nexport const findLabelForControlElement = (element: HTMLElement): string => {\n  // 1. Parent 'label' element\n  let parentLabel = findParentLabel(element.parentNode as HTMLElement);\n  if (parentLabel) {\n    return composeElementTextRepresentation(parentLabel, '');\n  }\n\n  // 2. 'aria-label' attribute\n  const ariaLabel = element.getAttribute('aria-label');\n  const ariaLabelledBy = element.getAttribute('aria-labelledby');\n  if (ariaLabel) {\n    return ariaLabel;\n  } else if (ariaLabelledBy) {\n    return getLabelledByElements(ariaLabelledBy);\n  }\n\n  // 3. 'label' element with for attr\n  if (element.id) {\n    let labelByFor = findLabelByForAttr(element.id);\n    if (labelByFor) {\n      return composeElementTextRepresentation(labelByFor, '');\n    }\n  }\n\n  // 4. 'title' attribute\n  const title = element.getAttribute('title');\n  if (title) {\n    return title;\n  }\n\n  // 6. Inner content\n  const innerContent = composeElementTextRepresentation(element, '');\n  return innerContent || '';\n};\n","import { NodeSemanticType } from '../../types/element';\n\nexport enum AccessibilityTreeNodeAttributeName {\n  TABINDEX = 'tabindex',\n  ROLE = 'role',\n  TYPE = 'type',\n  SRC = 'src',\n  ARIA_LEVEL = 'ariaLevel',\n  ORIGINAL_ALT = 'originalAlt',\n}\n\nexport interface Element extends HTMLElement {\n  uwAtoId?: number;\n}\n\nexport interface AccessibilityTreeNodeAttribute {\n  name: AccessibilityTreeNodeAttributeName;\n  value: string;\n}\n\nexport interface AccessibilityTreeNode {\n  id: number;\n  xpath: string;\n  label: string;\n  tagName: string;\n  type: NodeSemanticType;\n  hidden: boolean;\n  attributes: AccessibilityTreeNodeAttribute[];\n  el?: HTMLElement;\n  parentXpath?: string;\n}\n\nexport enum AccessibilityTreeWalkerNodeType {\n  UNKNOWN = 'UNKNOWN',\n  NOT_ALLOWED = 'NOT_ALLOWED',\n  TEXT_NODE = 'TEXT_NODE',\n  LANDMARK = 'LANDMARK',\n  CONTROL = 'CONTROL',\n  HEADING = 'HEADING',\n  HAS_ALT_DESCRIPTION = 'HAS_ALT_DESCRIPTION',\n  COMPOSED_TEXT_NODES = 'COMPOSED_TEXT_NODES',\n  IFRAME = 'IFRAME',\n  HIDDEN_FOR_READER = 'HIDDEN_FOR_READER',\n}\n\nexport interface AccessibilityTreeWalkerNode {\n  node: HTMLElement;\n  type: AccessibilityTreeWalkerNodeType;\n}\n\nexport interface IElementAdditionalParams {\n  parentXpath?: string;\n}\n\nexport interface ElementAttributes {\n  tagName?: string;\n  tabindex?: string;\n  role?: string;\n  ariaLevel?: string;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n  type?: string;\n  uwAtoId?: number;\n}\n","export enum NodeSemanticType {\n  UNKNOWN = 'unknown',\n  TEXT = 'text',\n  IMAGE = 'image',\n  HEADING = 'heading',\n  FOOTER = 'footer',\n  HEADER = 'header',\n  NAV = 'nav',\n  MAIN = 'main',\n  FORM = 'form',\n  LANDMARK = 'landmark',\n  LINK = 'link',\n  BUTTON = 'button',\n  CHECKBOX = 'checkbox',\n  RADIOBUTTON = 'radiobutton',\n  INPUT = 'input',\n  TEXTAREA = 'textarea',\n  SELECT = 'select',\n  ABBR = 'abbr',\n  LIST_ITEM = 'list item',\n}\n","export const TREE_OBSERVER_ACTION = 'accessibility-tree-observer';\n\nexport const UW_IGNORE_ATTR = 'data-uw-rm-ignore';\n\nexport const UW_ELEMENTS_CLASSES = [\n  'uw-sl',\n  'uwy',\n  'uw-s10-reading-guide',\n  'uw-s12-tooltip',\n];\n","import {\n  composeElementTextRepresentation,\n  getLabelledByElements,\n  findLabelForControlElement,\n} from '@uw/utils';\nimport { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport { ElementAttributes } from '../types';\n\nexport const getTextToRead = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): string => {\n  if (attributes.ariaLabel) {\n    return attributes.ariaLabel;\n  }\n  if (attributes.ariaLabelledBy) {\n    return getLabelledByElements(attributes.ariaLabelledBy);\n  }\n  return composeElementTextRepresentation(element, '');\n};\n\nexport const processControlNode = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): ProcessedElement => {\n  const { tagName, role, type, ariaLabel, ariaLabelledBy } = attributes;\n  let isLinkOrButton = false;\n  let textToRead = '';\n  let semanticType = NodeSemanticType.TEXT;\n\n  if (role === 'menuitem' || role === 'option') {\n    textToRead = getTextToRead(element, attributes);\n    isLinkOrButton = true;\n  } else if (role === 'link' || (tagName === 'A' && !role)) {\n    semanticType = NodeSemanticType.LINK;\n    textToRead = getTextToRead(element, attributes);\n    isLinkOrButton = true;\n  } else if (role === 'button' || tagName === 'BUTTON') {\n    semanticType = NodeSemanticType.BUTTON;\n    textToRead = getTextToRead(element, attributes);\n    isLinkOrButton = true;\n  } else if (\n    tagName === 'INPUT' &&\n    (type === 'button' || type === 'submit' || type === 'reset')\n  ) {\n    semanticType = NodeSemanticType.BUTTON;\n    if (ariaLabel) {\n      textToRead = ariaLabel;\n    } else if (ariaLabelledBy) {\n      textToRead = getLabelledByElements(ariaLabelledBy);\n    }\n    isLinkOrButton = true;\n  }\n\n  if (!isLinkOrButton) {\n    textToRead = findLabelForControlElement(element);\n\n    if (role === 'checkbox' || (tagName === 'INPUT' && type === 'checkbox')) {\n      semanticType = NodeSemanticType.CHECKBOX;\n    } else if (role === 'radio' || (tagName === 'INPUT' && type === 'radio')) {\n      semanticType = NodeSemanticType.RADIOBUTTON;\n    } else if (tagName === 'INPUT') {\n      semanticType = NodeSemanticType.INPUT;\n    }\n\n    if (tagName === 'TEXTAREA') {\n      semanticType = NodeSemanticType.TEXTAREA;\n    }\n\n    if (tagName === 'SELECT') {\n      semanticType = NodeSemanticType.SELECT;\n    }\n  }\n\n  return { semanticType, textToRead };\n};\n","import { xpath } from '@uw/utils';\nimport {\n  AccessibilityTreeNode,\n  AccessibilityTreeWalkerNodeType,\n  IElementAdditionalParams,\n  AccessibilityTreeWalkerNode,\n  AccessibilityTreeNodeAttribute,\n  ElementAttributes,\n  AccessibilityTreeNodeAttributeName,\n  Element,\n} from '../types';\nimport { NodeSemanticType } from '../../../types/element';\nimport { UW_ELEMENTS_CLASSES, UW_IGNORE_ATTR } from '../constants';\nimport { ProcessedElement } from './types';\nimport { processTextNode } from './process-text-node';\nimport { processComposedTextNode } from './process-composed-text-node';\nimport { processHiddenNode } from './process-hidden-node';\nimport { processHeadingNode } from './process-heading-node';\nimport { processLandmarkNode } from './process-landmark-node';\nimport { processControlNode } from './process-control-node';\nimport { processNodeWithAlt } from './process-node-with-alt';\nimport { processUnknownNode } from './process-unknown-node';\n\nconst additionalParams: IElementAdditionalParams = {};\n\nconst accessibilityTreeWalker = UserWayWidgetApp.getLib(\n  'accessibility_tree_walker',\n);\n\nlet attributesToReturn: AccessibilityTreeNodeAttribute[] = [];\nlet treeWalkerNodeType;\nlet identifierInc = 1;\n\nexport const isUwElement = (element: HTMLElement): boolean => {\n  const isTextNode = element.nodeType === 3;\n  return (\n    UW_ELEMENTS_CLASSES.some((cl) =>\n      element.closest ? element.closest(`.${cl}`) : false,\n    ) ||\n    (!isTextNode && element.hasAttribute(UW_IGNORE_ATTR))\n  );\n};\n\nexport const checkHidden = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): void => {\n  const clone = element.cloneNode(true);\n  (clone as HTMLElement).removeAttribute('aria-hidden');\n  treeWalkerNodeType = accessibilityTreeWalker.identifyElementType(clone);\n\n  const isUnknownType =\n    treeWalkerNodeType === AccessibilityTreeWalkerNodeType.UNKNOWN;\n  // separate check for images cause identifyElementType method determine element type as unknown\n  // for images that don't have alt attribute, but it is possible case for images with aria-hidden true\n  if (\n    isUnknownType &&\n    (attributes.tagName === 'IMG' || attributes.role === 'img')\n  ) {\n    treeWalkerNodeType = AccessibilityTreeWalkerNodeType.HAS_ALT_DESCRIPTION;\n  }\n};\n\nconst getElementAttributes = (\n  element: AccessibilityTreeWalkerNode,\n): ElementAttributes => {\n  if (!element || !element.type) {\n    return {};\n  }\n\n  const { node } = element;\n\n  if (\n    [\n      AccessibilityTreeWalkerNodeType.UNKNOWN,\n      AccessibilityTreeWalkerNodeType.NOT_ALLOWED,\n      AccessibilityTreeWalkerNodeType.TEXT_NODE,\n    ].includes(element.type)\n  ) {\n    return {\n      uwAtoId: (node as Element).uwAtoId,\n    };\n  }\n\n  return {\n    tagName: node.tagName,\n    tabindex: node.getAttribute('tabindex') || '',\n    role: node.getAttribute('role') || '',\n    ariaLevel: node.getAttribute('aria-level') || '',\n    ariaLabel: node.getAttribute('aria-label') || '',\n    ariaLabelledBy: node.getAttribute('aria-labelledby') || '',\n    type: node.getAttribute('type') || '',\n    uwAtoId: (node as Element).uwAtoId,\n  };\n};\n\nconst getAttributesToReturn = (\n  elementAttributes: ElementAttributes,\n): AccessibilityTreeNodeAttribute[] => {\n  if (elementAttributes.tabindex) {\n    attributesToReturn.push({\n      name: AccessibilityTreeNodeAttributeName.TABINDEX,\n      value: elementAttributes.tabindex,\n    });\n  }\n  if (elementAttributes.role) {\n    attributesToReturn.push({\n      name: AccessibilityTreeNodeAttributeName.ROLE,\n      value: elementAttributes.role,\n    });\n  }\n  if (elementAttributes.type) {\n    attributesToReturn.push({\n      name: AccessibilityTreeNodeAttributeName.TYPE,\n      value: elementAttributes.type,\n    });\n  }\n  if (elementAttributes.ariaLevel) {\n    attributesToReturn.push({\n      name: AccessibilityTreeNodeAttributeName.ARIA_LEVEL,\n      value: elementAttributes.ariaLevel,\n    });\n  }\n  return attributesToReturn;\n};\n\nexport const buildAccessibilityTreeNode = (\n  element: HTMLElement,\n  isTreeBuilding?: boolean,\n): AccessibilityTreeNode | null => {\n  attributesToReturn = [];\n\n  // to avoid including uw widget elements to element tree\n  if (isUwElement(element) && !isTreeBuilding) {\n    return null;\n  }\n\n  const node: AccessibilityTreeWalkerNode = {\n    node: element,\n    type: accessibilityTreeWalker.identifyElementType(element),\n  };\n\n  const elementAttributes = getElementAttributes(node);\n\n  treeWalkerNodeType = accessibilityTreeWalker.identifyElementType(element);\n\n  const hidden =\n    treeWalkerNodeType === AccessibilityTreeWalkerNodeType.HIDDEN_FOR_READER;\n\n  attributesToReturn = getAttributesToReturn(elementAttributes);\n\n  if (hidden) {\n    checkHidden(element, elementAttributes); // check what is the element type if element would not be hidden\n  }\n\n  let processedElement: ProcessedElement;\n\n  switch (treeWalkerNodeType) {\n    case AccessibilityTreeWalkerNodeType.TEXT_NODE:\n      processedElement = processTextNode(element);\n      additionalParams.parentXpath =\n        processedElement.additionalParams?.parentXpath;\n      break;\n    case AccessibilityTreeWalkerNodeType.COMPOSED_TEXT_NODES:\n      processedElement = processComposedTextNode(element, elementAttributes);\n      break;\n    case AccessibilityTreeWalkerNodeType.HIDDEN_FOR_READER:\n      processedElement = processHiddenNode();\n      break;\n    case AccessibilityTreeWalkerNodeType.HEADING:\n      processedElement = processHeadingNode(element, elementAttributes);\n      break;\n    case AccessibilityTreeWalkerNodeType.LANDMARK:\n      processedElement = processLandmarkNode(elementAttributes);\n      break;\n    case AccessibilityTreeWalkerNodeType.CONTROL:\n      processedElement = processControlNode(element, elementAttributes);\n      break;\n    case AccessibilityTreeWalkerNodeType.HAS_ALT_DESCRIPTION:\n      processedElement = processNodeWithAlt(\n        element,\n        elementAttributes,\n        attributesToReturn,\n      );\n      if (processedElement.attributesToReturn) {\n        attributesToReturn = processedElement.attributesToReturn;\n      }\n      break;\n    case AccessibilityTreeWalkerNodeType.UNKNOWN:\n      processedElement = processUnknownNode(element, elementAttributes);\n      break;\n    default:\n      processedElement = {\n        textToRead: '',\n        semanticType: NodeSemanticType.TEXT,\n      };\n  }\n\n  let id;\n  if (elementAttributes.uwAtoId) {\n    id = elementAttributes.uwAtoId;\n  } else {\n    id = identifierInc;\n    identifierInc += 1;\n    (node.node as Element).uwAtoId = id;\n  }\n\n  return {\n    id,\n    xpath: xpath(element),\n    label: processedElement.textToRead.replace(/\\|/g, '').trim(),\n    tagName: elementAttributes.tagName || '',\n    type: processedElement.semanticType,\n    hidden,\n    attributes: attributesToReturn,\n    el: node.node,\n    ...additionalParams,\n  };\n};\n","import { xpath } from '@uw/utils';\nimport { NodeSemanticType } from '../../../types/element';\nimport { IElementAdditionalParams } from '../types';\nimport { ProcessedElement } from './types';\n\nexport const processTextNode = (element: HTMLElement): ProcessedElement => {\n  const semanticType = NodeSemanticType.TEXT;\n  let textToRead = '';\n  if (element.textContent) {\n    textToRead = element.textContent\n      .trim()\n      .replace(/(\\n|\\r\\n)/g, '')\n      .replace(/\\s+/g, ' ');\n  }\n\n  const additionalParams: IElementAdditionalParams = {};\n  if (element.parentElement) {\n    additionalParams.parentXpath = xpath(element.parentElement);\n  }\n\n  return { semanticType, textToRead, additionalParams };\n};\n","import { composeElementTextRepresentation } from '@uw/utils';\nimport { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport { ElementAttributes } from '../types';\n\nexport const processComposedTextNode = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): ProcessedElement => {\n  const semanticType =\n    attributes.tagName === 'LI'\n      ? NodeSemanticType.LIST_ITEM\n      : NodeSemanticType.TEXT;\n  const textToRead =\n    attributes.ariaLabel || composeElementTextRepresentation(element, '');\n\n  return { semanticType, textToRead };\n};\n","import { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\n\nexport const processHiddenNode = (): ProcessedElement => {\n  const semanticType = NodeSemanticType.UNKNOWN;\n  return { semanticType, textToRead: '' };\n};\n","import { composeElementTextRepresentation } from '@uw/utils';\nimport { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport { ElementAttributes } from '../types';\n\nexport const processHeadingNode = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): ProcessedElement => {\n  const semanticType = NodeSemanticType.HEADING;\n  const textToRead =\n    attributes.ariaLabel || composeElementTextRepresentation(element, '');\n\n  return { semanticType, textToRead };\n};\n","import { getLabelledByElements } from '@uw/utils';\nimport { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport { ElementAttributes } from '../types';\n\nexport const processLandmarkNode = (\n  attributes: ElementAttributes,\n): ProcessedElement => {\n  let textToRead = '';\n  let semanticType;\n\n  if (attributes.ariaLabel) {\n    textToRead = attributes.ariaLabel;\n  } else if (attributes.ariaLabelledBy) {\n    textToRead = getLabelledByElements(attributes.ariaLabelledBy);\n  }\n\n  const { tagName } = attributes;\n  const { role } = attributes;\n\n  if (tagName === 'FOOTER' || role === 'contentinfo') {\n    semanticType = NodeSemanticType.FOOTER;\n  } else if (tagName === 'HEADER' || role === 'banner') {\n    semanticType = NodeSemanticType.HEADER;\n  } else if (tagName === 'FORM' || role === 'form') {\n    semanticType = NodeSemanticType.FORM;\n  } else if (tagName === 'MAIN' || role === 'main') {\n    semanticType = NodeSemanticType.MAIN;\n  } else if (tagName === 'NAV' || role === 'navigation') {\n    semanticType = NodeSemanticType.NAV;\n  } else {\n    semanticType = NodeSemanticType.LANDMARK;\n  }\n\n  return { semanticType, textToRead };\n};\n","import { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport {\n  ElementAttributes,\n  AccessibilityTreeNodeAttributeName,\n  AccessibilityTreeNodeAttribute,\n} from '../types';\n\nexport const processNodeWithAlt = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n  attributesToReturn: AccessibilityTreeNodeAttribute[],\n): ProcessedElement => {\n  const { tagName, role, ariaLabel } = attributes;\n  const alt = element.getAttribute('alt') || '';\n  const title = element.getAttribute('title') || '';\n  const remediationAltOriginal =\n    element.getAttribute('data-uw-rm-ima-original') || '';\n  let textToRead = '';\n  let semanticType = NodeSemanticType.TEXT;\n  const attributesToReturnCopy = attributesToReturn;\n\n  if (tagName === 'IMG' || role === 'img') {\n    semanticType = NodeSemanticType.IMAGE;\n    attributesToReturnCopy.push({\n      name: AccessibilityTreeNodeAttributeName.SRC,\n      value: (element as HTMLImageElement).src,\n    });\n    attributesToReturnCopy.push({\n      name: AccessibilityTreeNodeAttributeName.ORIGINAL_ALT,\n      value: remediationAltOriginal,\n    });\n    textToRead = ariaLabel || alt || remediationAltOriginal || textToRead;\n  }\n\n  if (tagName === 'ABBR') {\n    semanticType = NodeSemanticType.ABBR;\n    textToRead = title;\n  }\n\n  return {\n    semanticType,\n    textToRead,\n    attributesToReturn: attributesToReturnCopy,\n  };\n};\n","import { NodeSemanticType } from '../../../types/element';\nimport { ProcessedElement } from './types';\nimport { ElementAttributes } from '../types';\n\nexport const processUnknownNode = (\n  element: HTMLElement,\n  attributes: ElementAttributes,\n): ProcessedElement => {\n  let semanticType = NodeSemanticType.TEXT;\n  const textToRead = '';\n\n  if (attributes.tagName === 'DIV' && !element.innerHTML) {\n    semanticType = NodeSemanticType.LANDMARK;\n  }\n\n  return { semanticType, textToRead };\n};\n","import { postMessage } from '@uw/utils';\nimport { buildAccessibilityTreeNode } from './build-accessibility-tree-node/build-accessibility-tree-node';\nimport { TREE_OBSERVER_ACTION } from './constants';\nimport { AccessibilityTreeNode, AccessibilityTreeWalkerNode } from './types';\n\nconst accessibilityTreeWalker = UserWayWidgetApp.getLib(\n  // TODO: tmp using of legacy accessibilityTreeWalker until implementation a new one in new remediation workspace\n  'accessibility_tree_walker',\n);\n\nconst ariaEditorIframeName = 'uwAccessibilityEditor';\n\nlet nodes: AccessibilityTreeNode[] = [];\n\nexport const generateAccessibilityTree = (): void => {\n  let cursor: Node | null = null;\n  nodes = [];\n  do {\n    const treeWalkerItem: AccessibilityTreeWalkerNode = accessibilityTreeWalker.getNextAccessibilityTreeNode(\n      cursor,\n    );\n    if (!treeWalkerItem) {\n      break;\n    }\n\n    const treeItem = buildAccessibilityTreeNode(treeWalkerItem.node);\n\n    if (treeItem) {\n      nodes.push(treeItem);\n    }\n\n    cursor = treeWalkerItem.node;\n  } while (cursor);\n\n  nodes = nodes.map((node) => {\n    const { el, ...tail } = node;\n    return tail;\n  });\n\n  postMessage(\n    {\n      action: TREE_OBSERVER_ACTION,\n      type: 'userway:ato-output:get',\n      data: {\n        nodes,\n        version: Date.now(),\n      },\n    },\n    [ariaEditorIframeName],\n  );\n};\n\nexport const getNodes = (): AccessibilityTreeNode[] => nodes;\n","interface PostMessageData {\n  action: string;\n  type?: string;\n  isUserWay?: boolean;\n  data?: { [key: string]: any };\n  state?: string;\n  config?: { [key: string]: any };\n  [key: string]: any;\n}\n\nexport const postMessage = (\n  data: PostMessageData,\n  iframes: string[] = ['userway'],\n): void => {\n  const newData = { ...data, isUserWay: true };\n\n  iframes.forEach((name: string) => {\n    let iframe = (window.frames as any)[name];\n\n    if (!iframe || typeof iframe.postMessage !== 'function') {\n      try {\n        iframe = document.querySelector(`iframe[name=${name}]`);\n        iframe = iframe ? iframe.contentWindow : null;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    iframe && iframe.postMessage(newData, '*');\n  });\n};\n","import { generateAccessibilityTree } from './post-message-api';\nimport {\n  subscribeOnDomUpdates,\n  unsubscribeFromDomUpdates,\n} from '../dom-observers/main-observer';\n\nexport const processMeta = {\n  enabled: false,\n};\n\nexport const enable = (): void => {\n  if (processMeta.enabled) {\n    return;\n  }\n\n  processMeta.enabled = true;\n\n  subscribeOnDomUpdates(generateAccessibilityTree);\n\n  generateAccessibilityTree();\n};\n\nexport const disable = (): void => {\n  if (!processMeta.enabled) {\n    return;\n  }\n\n  processMeta.enabled = false;\n\n  unsubscribeFromDomUpdates(generateAccessibilityTree);\n};\n","import { generateAccessibilityTree } from './post-message-api';\nimport { enable, disable } from './accessibility-tree-observer-control';\nimport { TREE_OBSERVER_ACTION } from './constants';\n\nconst postMessageApi = {\n  'userway:ato-input:enable': enable,\n  'userway:ato-input:disable': disable,\n  'userway:ato-input:get': generateAccessibilityTree,\n};\n\nexport const initAccessibilityTreeObserver = (): void => {\n  window.addEventListener('message', (event) => {\n    const {\n      data: { action, type },\n    } = event;\n    if (action !== TREE_OBSERVER_ACTION) {\n      return;\n    }\n\n    if (postMessageApi[type as keyof typeof postMessageApi]) {\n      postMessageApi[type as keyof typeof postMessageApi]();\n    }\n  });\n};\n","export const EXCLUDED_DOMAINS = {\n  automaticcoupons: /automaticcoupons/,\n  'shopping.yahoo': /shopping\\.yahoo/,\n  shopperapproved: /shopperapproved/,\n  rakuten: /rakuten/,\n  'translate.google': /translate\\.google/,\n  'maps.googleapis.com': /maps\\.googleapis\\.com/,\n  's.w.org': /s\\.w\\.org/,\n  avatar: /avatar/,\n  companylogos: /companylogos/,\n  favicon: /favicon/,\n  activecampaign: /lt\\.php(.*)?l=open/,\n  aweber: /openrate\\.aweber\\.com/,\n  bananatag: /bl-1\\.com/,\n  boomerang: /mailstat\\.us\\/tr/,\n  'campaign monitor': /cmail(\\d+)\\.com\\/t\\//,\n  'cirrus insight': /tracking\\.cirrusinsight\\.com/,\n  close: /close\\.com\\/email_opened/,\n  'constant contact': /rs6\\.net\\/on\\.jsp/,\n  contactmonkey: /contactmonkey\\.com\\/api\\/v1\\/tracker/,\n  convertkit: /convertkit-mail\\.com\\/o/,\n  'critical impact': /portal\\.criticalimpact\\.com\\/c2\\//,\n  emarsys: /emarsys\\.com\\/e2t\\/o/,\n  gem: /zen\\.sr\\/o/,\n  getnotify: /email81\\.com\\/case/,\n  getresponse: /getresponse\\.com\\/open\\.html/,\n  growthdot: /growthdot\\.com\\/api\\/mail-tracking/,\n  front: /app\\.frontapp\\.com\\/(.*)?\\/seen/,\n  hubspot: /t\\.(hubspotemail|hubspotfree|signaux|senal|sidekickopen|sigopn)/,\n  icontact: /click\\.icptrack\\.com\\/icp/,\n  intercom: /(via\\.intercom\\.io\\/o)|(intercom-mail\\.com\\/via\\/o)/,\n  litmus: /emltrk\\.com/,\n  mailchimp: /list-manage\\.com\\/track/,\n  mailgun: /email\\.(mailgun|mg)(.*)?\\/o/,\n  mailjet: /mjt\\.lu\\/oo/,\n  mailspring: /getmailspring\\.com\\/open/,\n  mailtrack: /(mailtrack\\.io\\/trace)|(mltrk\\.io\\/pixel)/,\n  mandrill: /mandrillapp\\.com\\/track/,\n  marketo: /resources\\.marketo\\.com\\/trk/,\n  mixmax: /(email|track)\\.mixmax\\.com/,\n  mixpanel: /api\\.mixpanel\\.com\\/track/,\n  nethunt: /nethunt\\.co(.*)?\\/pixel\\.gif/,\n  newton: /tr\\.cloudmagic\\.com/,\n  outreach: /api\\/mailings\\/opened/,\n  phplist: /phplist\\.com\\/lists\\/ut\\.php/,\n  polymail: /polymail\\.io/,\n  postmark: /pstmrk\\.it\\/open/,\n  'return path': /returnpath\\.net\\/pixel\\.gif/,\n  sailthru: /sailthru\\.com\\/trk/,\n  salesforce: /nova\\.collect\\.igodigital\\.com/,\n  sendgrid: /wf\\/open\\?upn/,\n  sendy: /sendy\\/t\\//,\n  streak: /mailfoogae\\.appspot\\.com/,\n  superhuman: /r\\.superhuman\\.com/,\n  thunderhead: /na5\\.thunderhead\\.com/,\n  tinyletter: /tinyletterapp\\.com.*open\\.gif/,\n  yamm: /yamm-track\\.appspot/,\n  yesware: /t\\.yesware\\.com/,\n  'zendesk sell': /futuresimple\\.com\\/api\\/v1\\/sprite\\.png/,\n};\n\nexport const ATTRIBUTES_DICTIONARY = ['icon', 'cart', 'logo'];\n\nexport const CONTAINING_ALT_ELEMENTS_TAGS = [\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'span',\n  'a',\n  'p',\n  'figcaption',\n  'caption',\n  'div',\n];\nexport const CONTAINING_ALT_CHILD_ELEMENTS_TAGS = [\n  'a',\n  'span',\n  'strong',\n  'em',\n  'b',\n  'i',\n  'q',\n  'mark',\n];\nexport const CONTAINING_ALT_ELEMENTS_ROLES = ['heading'];\nexport const ALT_FROM_AROUND_TEXT_PARENTS_LIMIT = 2;\n\nexport const BASE64_REGEXP = new RegExp('^(data:)');\nexport const SVG_REGEXP = new RegExp(/^.+\\.svg$/);\nexport const MIN_IMAGE_SIZE = 50;\nexport const MIN_IMAGE_SIZE_FOR_PROCESSING = 10;\nexport const MICRO_IMAGE_SIZE = 5;\nexport const MAX_ASPECT_RATIO = 10;\nexport const ALT_MAX_LENGTH = 255;\n\nexport const enum DecorativeReason {\n  EXCLUDED_SRC = 'EXCLUDED_SRC',\n  HIDDEN_FROM_SCREEN_READER = 'HIDDEN_FROM_SCREEN_READER',\n  BASE64 = 'BASE64',\n  SVG = 'SVG',\n  SMALL_SIZE = 'SMALL_SIZE',\n  MICRO_SIZE = 'MICRO_SIZE',\n  WRONG_SRC = 'WRONG_SRC',\n  ASPECT_RATIO = 'ASPECT_RATIO',\n}\n\nexport const SHOW_IN_WIDGET_REMEDIATION_LIST = [\n  DecorativeReason.SVG,\n  DecorativeReason.SMALL_SIZE,\n  DecorativeReason.HIDDEN_FROM_SCREEN_READER,\n];\n\nexport const IMAGE_ORIGINAL_ALT_ATTR = 'data-uw-rm-alt-original';\nexport const IMAGE_ALT_HELPER_ID = 'REMEDIATION_IMAGE_MISSING_ALT';\nexport const IMAGE_PROCESSED_ATTR = 'data-uw-rm-alt';\n\nexport const IMG_ALTS_DEBOUNCE_TIME = 1000;\nexport const IMG_ALTS_DEBOUNCE_MAX_TIME = 2000;\n\nexport const IMAGE_EXTENSIONS = [\n  'jpg',\n  'jpeg',\n  'png',\n  'gif',\n  'bmp',\n  'tiff',\n  'tif',\n  'svg',\n  'webp',\n  'ico',\n  'apng',\n  'heif',\n  'heic',\n  'avif',\n  'eps',\n  'raw',\n  'cr2',\n  'nef',\n  'orf',\n  'sr2',\n];\n\nexport enum ImageProcessedResult {\n  CorrectAlt = 'ALT',\n  Reverted = 'RT',\n  Backend = 'BE',\n  Excluded = 'EX',\n  Hidden = 'HD',\n  Base64 = 'BS64',\n  Svg = 'SVG',\n  Small = 'SM',\n  Micro = 'MC',\n  InvalidSrc = 'SRC',\n  AspectRatio = 'AR',\n  AI = 'AI',\n  AIQuotaExceed = 'QU',\n  ClosestText = 'CT',\n}\n","import { ServicesConfig } from '../../config/config';\n\nexport const EDITOR_IFRAME_NAME: string = 'uwAccessibilityEditor';\n\nexport const IFRAME_ARIA_EDITOR_URL = ServicesConfig.editorBuildUrl;\n\nexport const ARIA_EDITOR_HELPER_ID = 'aria-editor';\n\nexport const PROCESSED_ATTR = 'data-uw-rm-heading';\n\nexport const AE_POST_MSG_ACTION = 'aria-editor';\n","import {\n  RemediationConfig,\n  ServicesConfig,\n  TuningsConfig,\n} from '../config/config';\nimport { getAllElements } from '../../utils/get-all-elements/get-all-elements';\nimport type { PerformanceService } from '../performance-service/performance-service';\nimport { useDeferredRunner } from '../performance-control/use-deferred-runner';\nimport { RemediationRule } from '../../types/remediation-rule';\nimport { PostMessageType } from '../../constants/base-api';\nimport { onPostMessage } from '../api/on-post-message';\nimport { initAccessibilityTreeObserver } from '../accessibility-tree-observer/accessibility-tree-observer';\nimport { subscribeOnDomUpdates } from '../dom-observers/main-observer';\nimport { getRuleConfigName } from '../../utils/get-rule-config-name/get-rule-config-name';\n\ninterface RemediationManager {\n  run: (elements: HTMLElement[]) => void;\n  init: () => void;\n  onDomUpdates: (elements: HTMLElement[]) => void;\n}\n\nconst ENV: string = '__ENV__';\nconst RULES_LIST: string = '__RULES_LIST__';\n\nexport const createRemediationManager = (): RemediationManager => {\n  let remediationInProgress: boolean = false;\n  let performanceService: PerformanceService;\n  let rulesList: RemediationRule[] = [];\n  let remediationElementsQueue: HTMLElement[] = [];\n\n  const runCallback = (elements: HTMLElement[]): void => {\n    const measureId = performanceService?.startMeasurement();\n    // TODO: check do we need run it cause now remediation is sync\n    if (remediationInProgress) {\n      return;\n    }\n\n    remediationInProgress = true;\n    rulesList.forEach((rule: RemediationRule) => {\n      rule.run(elements);\n    });\n    remediationInProgress = false;\n    remediationElementsQueue = [];\n\n    performanceService?.stopMeasurement(measureId);\n  };\n\n  const { run } = useDeferredRunner(runCallback);\n\n  const onDomUpdates = (elements: HTMLElement[]): void => {\n    /** PUSHING MUTATED ELEMENTS TO ARRAY */\n    remediationElementsQueue.push(...elements);\n    /** THROTTLED/DEBOUNCED CALL */\n    run(remediationElementsQueue);\n  };\n\n  const init = async (): Promise<void> => {\n    if (ENV === 'development') {\n      const performanceServiceModule = await import(\n        '../performance-service/performance-service'\n      );\n\n      performanceService = performanceServiceModule.performanceService;\n    }\n\n    const RulesListModule = await import(\n      RULES_LIST === 'paid'\n        ? '../rules-list/rules-list'\n        : '../rules-list/rules-list-free'\n    );\n\n    // filter rules disabled by BE config\n    rulesList = RulesListModule.RulesList.filter((rule: RemediationRule) => {\n      const configKey = getRuleConfigName(rule.ruleId);\n\n      if (!configKey || !ServicesConfig.paidAi) {\n        return true;\n      }\n\n      const config = RemediationConfig[configKey];\n\n      if (!config) {\n        return true;\n      }\n\n      return (config as RemediationRuleConfigV2).enabled;\n    });\n\n    // check if run remediation on tab enabled\n    if (!TuningsConfig.tech_rem_on_tab) {\n      const allElements = getAllElements();\n      run([...allElements]);\n    }\n\n    const unsubscribe = onPostMessage(\n      PostMessageType.KeyboardNavEnabled,\n      () => {\n        const allElements = getAllElements();\n        run([...allElements]);\n        unsubscribe();\n      },\n    );\n\n    initAccessibilityTreeObserver();\n\n    subscribeOnDomUpdates(onDomUpdates);\n  };\n\n  return { run, init, onDomUpdates };\n};\n\nexport const remediationManager = createRemediationManager();\n","import { IMAGE_ALT_HELPER_ID } from '../../common/rules/image-alt/constants';\nimport { ARIA_EDITOR_HELPER_ID } from '../../common/rules/aria-editor/constants';\nimport { EMPTY_CONTROLS_RULE_ID } from '../../common/rules/empty-controls/constants';\nimport { FORM_RULE_ID } from '../../common/rules/form-label/constants';\n\nconst configFields = ['alt', 'ariaEditor', 'emptyControls', 'forms'] as const;\nexport type RuleFiled = typeof configFields[number];\n\n/**\n * Function returns config name used in remediation config (tunings) for rule.\n * @param ruleId\n */\nexport const getRuleConfigName = (ruleId: string): RuleFiled | null => {\n  switch (ruleId) {\n    case IMAGE_ALT_HELPER_ID:\n      return 'alt';\n    case ARIA_EDITOR_HELPER_ID:\n      return 'ariaEditor';\n    case EMPTY_CONTROLS_RULE_ID:\n      return 'emptyControls';\n    case FORM_RULE_ID:\n      return 'forms';\n    default:\n      return null;\n  }\n};\n","export const EMPTY_CONTROLS_RULE_ID = 'REMEDIATION_EMPTY_CONTROLS';\r\n\r\nexport const PROCESSED_ATTR = 'data-uw-rm-empty-ctrl';\r\n\r\nexport const DICTIONARY = [\r\n  'facebook',\r\n  'youtube',\r\n  'whatsapp',\r\n  'instagram',\r\n  'twitter',\r\n  'reddit',\r\n  'linkedin',\r\n  'viber',\r\n  'pinterest',\r\n  'telegram',\r\n  'search',\r\n  'cart',\r\n  'home',\r\n];\r\n\r\nexport const ACTIONS_DICTIONARY = {\r\n  prev: 'Get previous item',\r\n  next: 'Get next item',\r\n  scroll: 'Activate for scroll',\r\n  top: 'Move to top',\r\n  bottom: 'Move to bottom',\r\n  expand: 'Expand this block',\r\n  collapse: 'Collapse this block',\r\n  close: 'Close this option',\r\n};\r\n\r\nexport const REGEXP_DICTIONARY = [{ re: /(fa-)(.+)/, replacer: '$2' }];\r\n","export const FORM_RULE_ID = 'REMEDIATION_FORM_LABEL';\nexport const FORM_PROCESSED_ATTR = 'data-uw-rm-form';\n\n// TODO: uncomment when we start to use constants\n// const AllowedTagList = ['INPUT', 'TEXTAREA', 'SELECT'];\n//\n// const AllowedTypesList = [\n//   'text',\n//   'password',\n//   'search',\n//   'email',\n//   'tel',\n//   'number',\n//   'textarea',\n//   'select-one',\n//   'checkbox',\n//   'radio',\n// ];\n","import { initDomObserver } from './common/dom-observers/main-observer';\nimport { remediationManager } from './common/remediation-manager/remediation-manager';\nimport { initConfig, TuningsConfig } from './common/config/config';\nimport { DEFAULT_REMEDIATION_TIMEOUT } from './constants';\n\nconst initApp = async (): Promise<void> => {\n  await initConfig();\n  const REMEDIATION_TIMEOUT =\n    TuningsConfig.tech_rem_in_throttle_ms ?? DEFAULT_REMEDIATION_TIMEOUT;\n\n  setTimeout(() => {\n    remediationManager.init();\n    initDomObserver();\n  }, REMEDIATION_TIMEOUT);\n};\n\ninitApp();\n","import {\n  RemediationRule,\n  RemediationRuleProps,\n} from '../../../types/remediation-rule';\nimport { PostMessageAction } from '../../../constants/base-api';\n\nexport const createRemediationRule = ({\n  ruleId,\n  isTargetElement,\n  rule,\n  postMessageApi,\n  forceRun,\n}: RemediationRuleProps): RemediationRule => {\n  const elementCanBeProcessed = (element: HTMLElement): boolean =>\n    !element.hasAttribute(`uw-ignore-${ruleId}`);\n\n  if (postMessageApi) {\n    window.addEventListener('message', (event: MessageEvent) => {\n      const { data } = event;\n      const { isUserWay, action, type } = data;\n\n      if (\n        !isUserWay ||\n        (action !== PostMessageAction.Remediation &&\n          action !== PostMessageAction.AriaEditor)\n      ) {\n        return;\n      }\n\n      if (postMessageApi[type]) {\n        postMessageApi[type](data.data ? data.data : data);\n      }\n    });\n  }\n\n  return {\n    run: (elements: HTMLElement[]) => {\n      if (!isTargetElement) {\n        rule({ context: { elements } });\n        return;\n      }\n\n      const filteredElements = elements.filter(\n        (elem) => elementCanBeProcessed(elem) && isTargetElement(elem),\n      );\n\n      if (!filteredElements.length) {\n        if (forceRun) {\n          rule({ context: { elements: [] } });\n        }\n\n        return;\n      }\n\n      rule({ context: { elements: filteredElements } });\n    },\n    stop: (): void => {\n      // stops rm process\n    },\n    rerun: (): void => {},\n    ruleId,\n  };\n};\n","import { IMAGE_ORIGINAL_ALT_ATTR } from '../constants';\nimport { ImageCorrection, ImageRemediationInfo, ImageGroup } from '../types';\n\nexport const getImageSource = ({ currentSrc, src }: HTMLImageElement): string =>\n  currentSrc || src;\n\nexport const hasMinAllowedSize = (\n  image: HTMLImageElement,\n  minSize: number,\n): boolean => {\n  const RADIX = 10;\n  try {\n    const { width, height } = window.getComputedStyle(image);\n    return (\n      parseInt(width, RADIX) > minSize && parseInt(height, RADIX) > minSize\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const convertToCorrectionInfo = (\n  image: HTMLImageElement,\n  { decorative, approved, fixedByUserWay, loadingFromMS }: ImageRemediationInfo,\n): ImageCorrection => ({\n  src: getImageSource(image),\n  alt: image.alt,\n  originalAlt: image.getAttribute(IMAGE_ORIGINAL_ALT_ATTR) ?? '',\n  decorative,\n  approved,\n  fixedByUserWay,\n  loadingFromMS,\n});\n\nexport const makeDecorative = (image: HTMLImageElement): void => {\n  image.setAttribute('role', 'presentation');\n  // we don't need aria hidden if role is presentation\n  image.removeAttribute('aria-hidden');\n  // do not use remove attribute, we should have an alt attribute\n  image.setAttribute('alt', '');\n};\n\nexport const getImageSrcGroupName = (src: string): string => {\n  if (!src) {\n    return '';\n  }\n\n  try {\n    const { hostname } = new URL(src);\n    return hostname\n      .replace(/^https?:\\/\\//, '')\n      .replace(/^www\\./, '')\n      .replace(/\\.[a-zA-Z0-9]*$/, '');\n  } catch (err) {\n    return '';\n  }\n};\n\nexport const getPageImagesMajorityGroup = (\n  images: HTMLImageElement[],\n): string => {\n  const groups: ImageGroup[] = [];\n\n  for (const img of images) {\n    const imageSrc = getImageSource(img);\n    const groupName = getImageSrcGroupName(imageSrc);\n\n    if (groupName) {\n      let byName = groups.find((gr) => gr.name === groupName);\n      if (!byName) {\n        byName = {\n          name: groupName,\n          weight: 0,\n        };\n        groups.push(byName);\n      }\n      byName.weight += 1;\n    }\n  }\n  const sortedGroups = groups.sort((grA, grB) =>\n    grA.weight < grB.weight ? 1 : -1,\n  );\n\n  return sortedGroups[0]?.name ?? '';\n};","import { ALT_MAX_LENGTH, IMAGE_EXTENSIONS } from '../constants';\r\n\r\nexport const isExistingAltInvalid = (alt: string): boolean => {\r\n  const endsWithFilenameRegex = new RegExp(\r\n    `\\\\.(${IMAGE_EXTENSIONS.join('|')})$`,\r\n    'i',\r\n  );\r\n  const endsWithFilename = endsWithFilenameRegex.test(alt);\r\n\r\n  const tooLong = alt.length > ALT_MAX_LENGTH;\r\n\r\n  const empty = !alt.trim();\r\n\r\n  const containManyNumbers = /[0-9]{5,}/.test(alt);\r\n\r\n  const specialSymbolsRegex = new RegExp(\r\n    /^[!@#$%^&*()_+{}[\\]`:;<>,.?~\\\\|\\-=\"'/]+$/,\r\n    'u',\r\n  );\r\n  const containOnlySpecialSymbols = specialSymbolsRegex.test(alt);\r\n\r\n  return (\r\n    containManyNumbers ||\r\n    endsWithFilename ||\r\n    tooLong ||\r\n    empty ||\r\n    containOnlySpecialSymbols\r\n  );\r\n};\r\n","import { normalizeSrc } from '@uw/utils';\nimport { ImageCorrection } from './types';\nimport { IMAGE_PROCESSED_ATTR, ImageProcessedResult } from './constants';\nimport {\n  convertToCorrectionInfo,\n  getImageSource,\n  makeDecorative,\n} from './utils/image-utils';\nimport { isExistingAltInvalid } from './utils/is-existing-alt-invalid';\nimport { CorrectionInfo } from '../../api/missing-alt';\nimport { RemediationConfig } from '../../config/config';\n\nexport const applyCorrectionData = (\n  altsCorrections: CorrectionInfo[],\n  imageElement: HTMLImageElement,\n): ImageCorrection | null => {\n  const imageAlt = imageElement.alt.trim();\n  const imageSrc = getImageSource(imageElement);\n\n  const imageCorrection = altsCorrections.find(\n    (correction) => normalizeSrc(correction.src) === normalizeSrc(imageSrc),\n  );\n\n  // check image corrections from BE\n  if (!imageCorrection || imageCorrection.alt === null) {\n    return null;\n  }\n\n  const { decorative, alt, approved, reverted } = imageCorrection;\n\n  if (reverted) {\n    imageElement.setAttribute(\n      IMAGE_PROCESSED_ATTR,\n      ImageProcessedResult.Reverted,\n    );\n\n    return convertToCorrectionInfo(imageElement, {\n      approved: true,\n      decorative: !imageAlt,\n      fixedByUserWay: false,\n    });\n  }\n\n  const isAutoStrategy =\n    !RemediationConfig || RemediationConfig.strategy === 'AUTO';\n  const waitingForApprove = !isAutoStrategy && !approved;\n\n  if (decorative && !waitingForApprove) {\n    makeDecorative(imageElement);\n  }\n\n  const altCanBeApplied =\n    approved || !imageAlt || isExistingAltInvalid(imageAlt);\n\n  if (alt && !waitingForApprove && altCanBeApplied && !decorative) {\n    imageElement.setAttribute('alt', alt);\n  }\n\n  imageElement.setAttribute(IMAGE_PROCESSED_ATTR, ImageProcessedResult.Backend);\n\n  const result = convertToCorrectionInfo(imageElement, {\n    approved,\n    decorative,\n    fixedByUserWay: true,\n  });\n\n  // alt was not applied in DOM, but we still need to show it in widget\n  if (waitingForApprove) {\n    result.alt = alt;\n  }\n\n  return result;\n};\n","export const isImageSizeDetectable = (image: HTMLImageElement): boolean => {\r\n  const { width, height } = window.getComputedStyle(image);\r\n\r\n  const pixelsUnitPattern = /^\\d*px?/i;\r\n  const isWidthInPixels = pixelsUnitPattern.test(width);\r\n  const isHeightInPixels = pixelsUnitPattern.test(height);\r\n  if (isWidthInPixels && isHeightInPixels) return true;\r\n\r\n  return false;\r\n};\r\n","import {\n  BASE64_REGEXP,\n  DecorativeReason,\n  ImageProcessedResult,\n  MICRO_IMAGE_SIZE,\n  MIN_IMAGE_SIZE,\n  SVG_REGEXP,\n} from '../constants';\nimport { getImageSource, hasMinAllowedSize } from './image-utils';\nimport { isExistingAltInvalid } from './is-existing-alt-invalid';\nimport { isExcludedDomainImage } from './is-excluded-domain-image';\nimport { hasWrongSrc } from './has-wrong-src';\nimport { hasWrongAspectRatio } from './has-wrong-aspect-ratio';\nimport { isImageSizeDetectable } from './is-image-size-detectable';\n\nexport const shouldBeDecorative = (\n  imageElement: HTMLImageElement,\n): DecorativeReason | null => {\n  const imageSrc = getImageSource(imageElement);\n  const isInvalidAlt = isExistingAltInvalid(imageElement.alt);\n  const imageHasComputedSize = isImageSizeDetectable(imageElement);\n\n  // # image src has wrong URL (high priority check)\n  const isImageSrcWrong = hasWrongSrc(imageSrc);\n  if (isImageSrcWrong) {\n    return DecorativeReason.WRONG_SRC;\n  }\n\n  // # image src includes excluded domain  (high priority check)\n  const isImageDomainExcluded = isExcludedDomainImage(imageSrc);\n  if (isImageDomainExcluded) {\n    return DecorativeReason.EXCLUDED_SRC;\n  }\n\n  // # image is very small (high priority check)\n  const isMicroImage = imageHasComputedSize\n    ? !hasMinAllowedSize(imageElement, MICRO_IMAGE_SIZE)\n    : false;\n  if (isMicroImage) {\n    return DecorativeReason.MICRO_SIZE;\n  }\n\n  // # image has wrong aspect ratio (high priority check)\n  const isWrongAspectRatio = imageHasComputedSize\n    ? hasWrongAspectRatio(imageElement)\n    : false;\n  if (isWrongAspectRatio) {\n    return DecorativeReason.ASPECT_RATIO;\n  }\n\n  // # image is base 64\n  // TODO: add support of base64 after BE implementation of sending src hash to alt enpoint\n  const isBase64 = BASE64_REGEXP.test(imageSrc);\n\n  if (isBase64) {\n    return DecorativeReason.BASE64;\n  }\n\n  // # image is hidden for screen readers\n  const hiddenForReaders =\n    imageElement.getAttribute('aria-hidden') === 'true' ||\n    imageElement.getAttribute('role') === 'presentation' ||\n    imageElement.getAttribute('role') === 'none';\n\n  if (hiddenForReaders) {\n    return DecorativeReason.HIDDEN_FROM_SCREEN_READER;\n  }\n\n  // # image is svg and doesn't have own alt attribute\n  const isSvgFile = SVG_REGEXP.test(imageSrc);\n\n  if (isSvgFile && isInvalidAlt) {\n    return DecorativeReason.SVG;\n  }\n\n  // # image is smaller than allowed size and doesn't have own alt attribute or has invalid alt\n  const hasCorrectSize = imageHasComputedSize\n    ? hasMinAllowedSize(imageElement, MIN_IMAGE_SIZE)\n    : true;\n  if (!hasCorrectSize && isInvalidAlt) {\n    return DecorativeReason.SMALL_SIZE;\n  }\n\n  return null;\n};\n\nexport const getDecorativeReasonAttribute = (\n  reason: DecorativeReason,\n): ImageProcessedResult => {\n  switch (reason) {\n    case DecorativeReason.ASPECT_RATIO:\n      return ImageProcessedResult.AspectRatio;\n    case DecorativeReason.BASE64:\n      return ImageProcessedResult.Base64;\n    case DecorativeReason.EXCLUDED_SRC:\n      return ImageProcessedResult.Excluded;\n    case DecorativeReason.SVG:\n      return ImageProcessedResult.Svg;\n    case DecorativeReason.MICRO_SIZE:\n      return ImageProcessedResult.Micro;\n    case DecorativeReason.SMALL_SIZE:\n      return ImageProcessedResult.Small;\n    case DecorativeReason.WRONG_SRC:\n      return ImageProcessedResult.InvalidSrc;\n    case DecorativeReason.HIDDEN_FROM_SCREEN_READER:\n    default:\n      return ImageProcessedResult.Hidden;\n  }\n};\n","import { BASE64_REGEXP } from '../constants';\r\n\r\n// return true, if image src is wrong\r\nexport const hasWrongSrc = (url: string): boolean => {\r\n  if (!url) return true;\r\n  if (url.match(BASE64_REGEXP)) return false;\r\n\r\n  // url starts from http(s) + domain + image extension + optional parameters\r\n  const correctImageUrlPattern = new RegExp(\r\n    `^https?://.{1,256}\\\\.[a-z]{2,6}/.+$`,\r\n    'i',\r\n  );\r\n\r\n  return !correctImageUrlPattern.test(url);\r\n};\r\n","import { EXCLUDED_DOMAINS } from '../constants';\r\n\r\nexport const isExcludedDomainImage = (url: string): boolean => {\r\n  if (typeof url !== 'string') return false;\r\n\r\n  for (const domain of Object.values(EXCLUDED_DOMAINS)) {\r\n    const regRule = new RegExp(domain, 'i');\r\n    if (url.match(regRule)) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import { MIN_IMAGE_SIZE_FOR_PROCESSING, MAX_ASPECT_RATIO } from '../constants';\r\n\r\nexport const hasWrongAspectRatio = (image: HTMLImageElement): boolean => {\r\n  const RADIX = 10;\r\n  try {\r\n    const { width, height } = window.getComputedStyle(image);\r\n    const widthInt = parseInt(width, RADIX);\r\n    const heightInt = parseInt(height, RADIX);\r\n\r\n    const incorrectWidthRatio =\r\n      widthInt <= MIN_IMAGE_SIZE_FOR_PROCESSING &&\r\n      heightInt >= widthInt * MAX_ASPECT_RATIO;\r\n\r\n    const incorrectHeightRatio =\r\n      heightInt <= MIN_IMAGE_SIZE_FOR_PROCESSING &&\r\n      widthInt >= heightInt * MAX_ASPECT_RATIO;\r\n\r\n    if (incorrectWidthRatio || incorrectHeightRatio) return true;\r\n\r\n    return false;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n","import { xpath } from '@uw/utils';\r\nimport { RelevantTextStorage } from '../types';\r\n\r\n/* \r\nThis storage is intended to minimize the number of text searches performed. When we find text for a particular image, we add it to the storage and retrieve it later.\r\n*/\r\nlet relevantTextStorage: RelevantTextStorage = {};\r\n\r\nexport const clearRelevantTextStorage = (): void => {\r\n  relevantTextStorage = {};\r\n};\r\n\r\nexport const addRelevantTextToStorage = (\r\n  image: HTMLImageElement,\r\n  text: string,\r\n): void => {\r\n  const imageXpath = xpath(image);\r\n  relevantTextStorage[imageXpath] = text;\r\n};\r\n\r\nexport const getRelevantTextFromStorage = (\r\n  image: HTMLImageElement,\r\n): string | null => {\r\n  const imageXpath = xpath(image);\r\n  return relevantTextStorage[imageXpath] || null;\r\n};\r\n","import { CorrectionInfo } from '../../../api/missing-alt';\nimport { ImageCorrection } from '../types';\nimport {\n  convertToCorrectionInfo,\n  getImageSource,\n  makeDecorative,\n} from './image-utils';\nimport { isExistingAltInvalid } from './is-existing-alt-invalid';\nimport {\n  DecorativeReason,\n  IMAGE_ALT_HELPER_ID,\n  IMAGE_ORIGINAL_ALT_ATTR,\n  IMAGE_PROCESSED_ATTR,\n  ImageProcessedResult,\n  SHOW_IN_WIDGET_REMEDIATION_LIST,\n  SVG_REGEXP,\n} from '../constants';\nimport { applyCorrectionData } from '../apply-corrections';\nimport {\n  getDecorativeReasonAttribute,\n  shouldBeDecorative,\n} from './should-be-decorative';\nimport {\n  ImageAltConfig,\n  RemediationConfig,\n  ServicesConfig,\n} from '../../../config/config';\nimport { saveRemediationResults } from '../../../remediation-result/remediation-result';\nimport { getRelevantTextFromStorage } from './relevant-text-storage';\n\nexport const sendRemediationResults = (corrections: ImageCorrection[]): void =>\n  saveRemediationResults<ImageCorrection>(\n    IMAGE_ALT_HELPER_ID,\n    corrections,\n    corrections.filter((i) => i.fixedByUserWay).length,\n    corrections.filter((i) => !i.approved).length,\n  );\n\nconst saveOriginalAlt = (imageElement: HTMLImageElement): void => {\n  if (!imageElement.hasAttribute(IMAGE_ORIGINAL_ALT_ATTR)) {\n    imageElement.setAttribute(IMAGE_ORIGINAL_ALT_ATTR, imageElement.alt);\n  }\n};\n\nexport const processImages = (\n  elements: HTMLImageElement[],\n  altCorrections: CorrectionInfo[] = [],\n): void => {\n  if (elements.length === 0) {\n    return;\n  }\n\n  const { paidAi } = ServicesConfig;\n  const imageCorrectionsList: ImageCorrection[] = [];\n\n  for (const elem of elements) {\n    const imageElement = elem as HTMLImageElement;\n    const isInvalidAlt = isExistingAltInvalid(imageElement.alt);\n    const imageSrc = getImageSource(imageElement);\n\n    // Save original alt as attribute\n    saveOriginalAlt(imageElement);\n\n    // Add role=\"img\" for svg images for screen reader correct work\n    // https://bugs.webkit.org/show_bug.cgi?id=216364\n    if (SVG_REGEXP.test(imageSrc) && paidAi) {\n      imageElement.setAttribute('role', 'img');\n    }\n\n    // try to apply corrections from BE\n    const result = applyCorrectionData(altCorrections, imageElement);\n\n    if (result) {\n      imageCorrectionsList.push(result);\n      continue;\n    }\n\n    if (!paidAi) {\n      continue;\n    }\n\n    const decorativeReason = shouldBeDecorative(imageElement);\n\n    // image has own image alt and it is correct\n    if (!isInvalidAlt && !decorativeReason) {\n      imageElement.setAttribute(\n        IMAGE_PROCESSED_ATTR,\n        ImageProcessedResult.CorrectAlt,\n      );\n\n      // we do not show images with excluded src for widget remediation section\n      imageCorrectionsList.push(\n        convertToCorrectionInfo(imageElement, {\n          approved: true,\n          decorative: false,\n          fixedByUserWay: false,\n        }),\n      );\n\n      continue;\n    }\n\n    // check if image should be decorative\n    if (\n      decorativeReason !== null ||\n      RemediationConfig.alt?.config?.quotaExceeded\n    ) {\n      makeDecorative(imageElement);\n      imageElement.setAttribute(\n        IMAGE_PROCESSED_ATTR,\n        getDecorativeReasonAttribute(decorativeReason as DecorativeReason),\n      );\n\n      if (\n        decorativeReason &&\n        SHOW_IN_WIDGET_REMEDIATION_LIST.includes(decorativeReason)\n      ) {\n        imageCorrectionsList.push(\n          convertToCorrectionInfo(imageElement, {\n            approved: false,\n            decorative: true,\n            fixedByUserWay: true,\n          }),\n        );\n      }\n\n      continue;\n    }\n\n    // try to generate alt from closest relevant text\n    const altFromSurroundingText = getRelevantTextFromStorage(imageElement);\n    if (altFromSurroundingText) {\n      imageElement.setAttribute('alt', altFromSurroundingText);\n      imageElement.setAttribute(\n        IMAGE_PROCESSED_ATTR,\n        ImageProcessedResult.ClosestText,\n      );\n\n      imageCorrectionsList.push(\n        convertToCorrectionInfo(imageElement, {\n          approved: false,\n          decorative: false,\n          fixedByUserWay: true,\n        }),\n      );\n\n      continue;\n    }\n\n    // if previous options are not applicable, that means that AI generation is in progress (if quota not exceed)\n\n    const { quota, usage } = ImageAltConfig;\n    const quotaExceed = usage >= quota;\n\n    if (quotaExceed) {\n      imageElement.setAttribute(\n        IMAGE_PROCESSED_ATTR,\n        ImageProcessedResult.AIQuotaExceed,\n      );\n      imageCorrectionsList.push(\n        convertToCorrectionInfo(imageElement, {\n          approved: false,\n          decorative: false,\n          fixedByUserWay: false,\n        }),\n      );\n    } else {\n      imageElement.setAttribute(IMAGE_PROCESSED_ATTR, ImageProcessedResult.AI);\n      imageCorrectionsList.push(\n        convertToCorrectionInfo(imageElement, {\n          approved: false,\n          decorative: false,\n          fixedByUserWay: true,\n          loadingFromMS: true,\n        }),\n      );\n    }\n  }\n\n  // send Post message data for widget\n  sendRemediationResults(imageCorrectionsList);\n};\n","export const saveRemediationResults = <T>(\n  name: string,\n  corrections: T[],\n  fixedCount: number,\n  toDoCount: number,\n): void => {\n  const legacyRemediationManager = UserWayWidgetApp.getLib(\n    'remediation_manager',\n  );\n  const legacyHelperOutcome = UserWayWidgetApp.getLib(\n    'remediation_helper_outcome',\n  );\n\n  if (!legacyHelperOutcome.of) {\n    return;\n  }\n\n  const result = legacyHelperOutcome.of(\n    name,\n    { items: corrections },\n    null,\n    fixedCount,\n    toDoCount,\n  );\n\n  legacyRemediationManager.HelperCallbackAggregator.onHelperRemediationCompleted(\n    result,\n  );\n};\n","import { ImageCorrection, UpdateImageInfo } from './types';\nimport { IMAGE_ORIGINAL_ALT_ATTR } from './constants';\nimport { convertToCorrectionInfo, makeDecorative } from './utils/image-utils';\nimport { initConfig } from '../../config/config';\nimport { sendRemediationResults } from './utils/process-images';\n\nconst getImagesFromDom = (src: string): NodeListOf<HTMLImageElement> => {\n  // some images can have src without protocol, so need to cover both cases\n  const srcWithoutProtocol = src.replace(/^https?:\\/\\//, '');\n  return document.querySelectorAll(\n    `img[src*=\"${srcWithoutProtocol}\" i],img[srcset*=\"${srcWithoutProtocol}\" i]`,\n  );\n};\n\nexport const revertImage = ({ src }: ImageCorrection): void => {\n  const images = getImagesFromDom(src);\n\n  for (const image of images) {\n    const originalAlt = image.getAttribute(IMAGE_ORIGINAL_ALT_ATTR);\n    if (originalAlt !== null) {\n      image.setAttribute('alt', originalAlt);\n    }\n  }\n};\n\nexport const updateImageInDom = ({\n  src,\n  decorative,\n  alt,\n  role,\n}: UpdateImageInfo): void => {\n  const images = getImagesFromDom(src);\n\n  if (!images.length) {\n    return;\n  }\n\n  for (const image of images) {\n    // # Apply alt attribute\n    image.setAttribute('alt', alt ?? '');\n\n    // # Apply decorative flag\n    if (decorative) {\n      makeDecorative(image);\n    } else {\n      if (\n        image.getAttribute('role') === 'presentation' ||\n        image.getAttribute('role') === 'none'\n      ) {\n        image.removeAttribute('role');\n      }\n\n      if (image.hasAttribute('aria-hidden')) {\n        image.removeAttribute('aria-hidden');\n      }\n    }\n\n    // # for images with role link/button/heading also set aria-label (role data can be received from a11y-editor)\n    if (['link', 'button', 'heading'].includes(role)) {\n      image.setAttribute('aria-label', alt);\n    }\n  }\n\n  sendRemediationResults([\n    convertToCorrectionInfo(images[0], {\n      approved: true,\n      decorative,\n      fixedByUserWay: false,\n    }),\n  ]);\n};\n\nexport const updateImgAltsConfig = (): void => {\n  // TODO: change this update after implementation using of separate endpoint for image config\n  initConfig();\n};\n","import { ENDPOINT_CDN } from '../../constants/base-api';\nimport { ImageAltConfig, ServicesConfig } from '../config/config';\n\nexport interface CorrectionInfo {\n  src: string;\n  alt: string;\n  approved: boolean;\n  decorative: boolean;\n  reverted?: boolean;\n  metadata: {\n    foundCachedResponse: boolean;\n    normalizedImageUrl: string;\n  };\n}\ninterface MissingAltResponse {\n  missingAlts: CorrectionInfo[];\n}\n\nexport const getMissingAlts = async (\n  altListJson: string,\n): Promise<MissingAltResponse> => {\n  const { account } = UserWayWidgetApp.ContextHolder.config;\n  const { siteId } = ServicesConfig;\n  const { resourceHash } = ImageAltConfig;\n\n  const preparedAltsData = encodeURIComponent(altListJson);\n  const response = await fetch(\n    `${ENDPOINT_CDN}api/img-dscr/v2/${account}/${siteId}/${resourceHash}/alts.json?dto=${preparedAltsData}`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    },\n  );\n  const json = await response.json();\n  return json.payload;\n};\n","import { IMAGE_EXTENSIONS } from '../common/rules/image-alt/constants';\r\n\r\n/* \r\nFunction removes URL parameters, ONLY if they go after the image extension:\r\nExample 1: http://example.com/image.jpg?id=25 ->  http://example.com/image.jpg\r\nExample 2: http://site.us/i.php?t=jpg&w=100 -> http://site.us/i.php?t=jpg&w=100\r\n*/\r\n\r\nexport const stripUrlParameters = (url: string): string => {\r\n  const imageUrlRegPattern = `(.*\\\\.(${IMAGE_EXTENSIONS.join('|')}))\\\\?.*$`;\r\n  const imageUrlRegRule = new RegExp(imageUrlRegPattern);\r\n\r\n  const result = url.match(imageUrlRegRule);\r\n\r\n  if (result && result[1]) {\r\n    return result[1].toLowerCase();\r\n  }\r\n\r\n  return url;\r\n};\r\n","export interface MissingAltElement {\n  normalizedSrc: string;\n  src: string;\n  fixed: boolean;\n}\n\nexport interface MissingAltInfo {\n  elements: MissingAltElement[];\n  page: string;\n  siteId: number;\n  userId: number;\n}\n\nexport interface ImageRemediationInfo {\n  approved: boolean;\n  decorative: boolean;\n  fixedByUserWay: boolean;\n  // TODO: rename to AI generation in progress (don't forget angular app)\n  loadingFromMS?: boolean;\n}\n\nexport interface ImageCorrection extends ImageRemediationInfo {\n  alt: string;\n  src: string;\n  originalAlt: string;\n}\n\nexport interface UpdateImageInfo extends ImageCorrection {\n  role: string;\n}\n\nexport enum GetImageAltDirective {\n  RO = 'RO', // Read-only (RO). If image description is found in the database, use it; otherwise, ignore the image.\n}\n\nexport interface ImageInfo {\n  src: string;\n  alt?: string;\n  dir?: GetImageAltDirective;\n}\n\nexport interface GetMissingAltsRequest {\n  sorted: ImageInfo[];\n  tier: AltRemediationTier;\n}\n\nexport interface ImageGroup {\n  name: string;\n  weight: number;\n}\n\nexport type AltTextSourceNode = Element | Text;\n\nexport interface RelevantTextStorage {\n  [key: string]: string;\n}\n","// remove all newlines and replace double spaces by spaces\r\nexport const removeNewlinesSpaces = (str: string): string => {\r\n  if (!str) return '';\r\n\r\n  return str.replace(/\\n/g, '').replace(/ {2,}/g, ' ').trim();\r\n};\r\n","import { removeNewlinesSpaces } from '.';\r\n\r\nexport const getSiblingNode = (\r\n  element: HTMLElement,\r\n  options: { type: 'next' | 'prev' },\r\n): ChildNode | null => {\r\n  if (!element) return null;\r\n\r\n  const siblingNode =\r\n    options.type === 'next' ? element.nextSibling : element.previousSibling;\r\n\r\n  // skip empty garbage text nodes from html markup\r\n  if (siblingNode?.nodeType === Node.TEXT_NODE) {\r\n    const trimmedTextNode = removeNewlinesSpaces(\r\n      siblingNode.nodeValue as string,\r\n    );\r\n    if (!trimmedTextNode) {\r\n      return getSiblingNode(siblingNode as HTMLElement, { type: options.type });\r\n    }\r\n  }\r\n\r\n  return siblingNode;\r\n};\r\n","import {\r\n  CONTAINING_ALT_ELEMENTS_ROLES,\r\n  CONTAINING_ALT_ELEMENTS_TAGS,\r\n} from '../constants';\r\n\r\nexport const isAllowedNode = (node: ChildNode): boolean => {\r\n  const isElementTypeNode = node.nodeType === Node.ELEMENT_NODE;\r\n  const isTextTypeNode = node.nodeType === Node.TEXT_NODE;\r\n\r\n  if (isTextTypeNode) return true;\r\n\r\n  if (isElementTypeNode) {\r\n    const isNodeHasAllowedTagname = CONTAINING_ALT_ELEMENTS_TAGS.some(\r\n      (tag) => tag === node.nodeName.toLowerCase(),\r\n    );\r\n    const isNodeHasAllowedRole = CONTAINING_ALT_ELEMENTS_ROLES.some(\r\n      (role) => role === (node as Element).getAttribute('role')?.toLowerCase(),\r\n    );\r\n    return isNodeHasAllowedTagname || isNodeHasAllowedRole;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import {\r\n  CONTAINING_ALT_CHILD_ELEMENTS_TAGS,\r\n  CONTAINING_ALT_ELEMENTS_TAGS,\r\n} from '../constants';\r\nimport { isExistingAltInvalid } from './is-existing-alt-invalid';\r\nimport { removeNewlinesSpaces } from './remove-newlines-spaces';\r\n\r\nconst allowedTagNames = Array.from(\r\n  new Set([\r\n    ...CONTAINING_ALT_ELEMENTS_TAGS,\r\n    ...CONTAINING_ALT_CHILD_ELEMENTS_TAGS,\r\n  ]),\r\n);\r\n\r\nexport const getAltTextFromNode = (node: ChildNode): string | null => {\r\n  if (node?.nodeType === Node.TEXT_NODE) {\r\n    const trimmedText = removeNewlinesSpaces(node.nodeValue as string);\r\n    if (trimmedText && !isExistingAltInvalid(trimmedText)) {\r\n      return trimmedText;\r\n    }\r\n  }\r\n\r\n  if (\r\n    node?.nodeType === Node.ELEMENT_NODE &&\r\n    allowedTagNames.includes((node as Element).tagName.toLowerCase())\r\n  ) {\r\n    for (const childNode of node.childNodes) {\r\n      const altText = getAltTextFromNode(childNode);\r\n      if (altText) {\r\n        return altText;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","import { removeNewlinesSpaces } from '.';\r\n\r\nimport {\r\n  CONTAINING_ALT_ELEMENTS_TAGS,\r\n  CONTAINING_ALT_ELEMENTS_ROLES,\r\n} from '../constants';\r\n\r\n// filter allows only not empty text nodes and elements with allowed tags/roles\r\nexport const filterNodes = (nodeItem: Node): boolean => {\r\n  const isElementTypeNode = nodeItem.nodeType === Node.ELEMENT_NODE;\r\n  const isTextTypeNode = nodeItem.nodeType === Node.TEXT_NODE;\r\n\r\n  if (!isTextTypeNode && !isElementTypeNode) return false;\r\n\r\n  if (isElementTypeNode && nodeItem.nodeName.toLowerCase() === 'img')\r\n    return true;\r\n\r\n  // for text nodes filter empty text nodes\r\n  if (isTextTypeNode)\r\n    return !!removeNewlinesSpaces(nodeItem.textContent as string);\r\n\r\n  const isNodeHasAllowedTagname = CONTAINING_ALT_ELEMENTS_TAGS.some(\r\n    (tag) => tag === (nodeItem as Element).nodeName.toLowerCase(),\r\n  );\r\n  const isNodeHasAllowedRole = CONTAINING_ALT_ELEMENTS_ROLES.some(\r\n    (role) =>\r\n      role === (nodeItem as Element).getAttribute('role')?.toLowerCase(),\r\n  );\r\n\r\n  return isNodeHasAllowedTagname || isNodeHasAllowedRole;\r\n};\r\n","import { getAltFromSiblings } from './get-alt-from-siblings';\r\nimport { filterNodes } from './filter-nodes';\r\n\r\nimport { AltTextSourceNode } from '../types';\r\n\r\nimport { ALT_FROM_AROUND_TEXT_PARENTS_LIMIT } from '../constants';\r\n\r\n/* \r\nThis counter counts the number of ansestor levels, where we try to find a text.\r\nThe first level is siblings of our image. The second level is siblings of the parent of our image and so on.\r\nSearch was unsuccessful, when we found ONLY invalid text(s) in the siblings.\r\nIf we didn't find any text nodes in the siblings, we don't increase the counter, we just skip this empty level and move to the next level.\r\n*/\r\nlet unsuccessfulSearchCounter = 0;\r\n\r\nexport const getAltFromClosestTextNode = (\r\n  currentEl: HTMLElement,\r\n): string | null => {\r\n  const parentEl = currentEl.parentElement;\r\n  if (!parentEl) return null;\r\n\r\n  // stop if we have more than 1 image (including our image) in parent node\r\n  const imagesTotal = parentEl.getElementsByTagName('img').length;\r\n  if (imagesTotal > 1) {\r\n    unsuccessfulSearchCounter = 0;\r\n    return null;\r\n  }\r\n\r\n  const childNodes = [].slice\r\n    .call(parentEl.childNodes)\r\n    .filter(filterNodes) as AltTextSourceNode[];\r\n\r\n  // go to next parent, if current contains only 1 child\r\n  if (childNodes.length === 1) {\r\n    return getAltFromClosestTextNode(parentEl as HTMLElement);\r\n  }\r\n\r\n  const altFromSiblings = getAltFromSiblings(currentEl);\r\n  if (altFromSiblings) {\r\n    unsuccessfulSearchCounter = 0;\r\n    return altFromSiblings;\r\n  }\r\n\r\n  unsuccessfulSearchCounter += 1;\r\n\r\n  // stop recursion, if parent is <body> element\r\n  if (parentEl.tagName.toLowerCase() === 'body') {\r\n    unsuccessfulSearchCounter = 0;\r\n    return null;\r\n  }\r\n\r\n  if (unsuccessfulSearchCounter < ALT_FROM_AROUND_TEXT_PARENTS_LIMIT) {\r\n    // we didn't find relevant text in the current parent, go to a next parent\r\n    return getAltFromClosestTextNode(parentEl as HTMLElement);\r\n  }\r\n\r\n  unsuccessfulSearchCounter = 0;\r\n  return null;\r\n};\r\n","import { getSiblingNode } from './get-sibling-node';\r\nimport { isAllowedNode } from './is-allowed-node';\r\nimport { getAltTextFromNode } from './get-alt-text-from-node';\r\n\r\nexport const getAltFromSiblings = (element: HTMLElement): string | null => {\r\n  let nextSiblingEl = getSiblingNode(element, { type: 'next' });\r\n  let prevSiblingEl = getSiblingNode(element, { type: 'prev' });\r\n  let textFromNextTextNodeSibling: string | null = null;\r\n  let textFromPrevTextNodeSibling: string | null = null;\r\n\r\n  while (nextSiblingEl || prevSiblingEl) {\r\n    if (nextSiblingEl && isAllowedNode(nextSiblingEl)) {\r\n      textFromNextTextNodeSibling = getAltTextFromNode(\r\n        nextSiblingEl as ChildNode,\r\n      );\r\n    }\r\n    if (prevSiblingEl && isAllowedNode(prevSiblingEl)) {\r\n      textFromPrevTextNodeSibling = getAltTextFromNode(\r\n        prevSiblingEl as ChildNode,\r\n      );\r\n    }\r\n\r\n    const altTextFromTextNode =\r\n      textFromNextTextNodeSibling || textFromPrevTextNodeSibling;\r\n\r\n    if (altTextFromTextNode) return altTextFromTextNode;\r\n\r\n    nextSiblingEl = getSiblingNode(nextSiblingEl as HTMLElement, {\r\n      type: 'next',\r\n    });\r\n    prevSiblingEl = getSiblingNode(prevSiblingEl as HTMLElement, {\r\n      type: 'prev',\r\n    });\r\n  }\r\n\r\n  return null;\r\n};\r\n","import { removeNewlinesSpaces } from './utils';\r\nimport { isExistingAltInvalid } from './utils/is-existing-alt-invalid';\r\nimport { getAltFromClosestTextNode } from './utils/get-alt-from-closest-text-node';\r\nimport { searchInAttributesDictionary } from './utils/search-in-attributes-dictionary';\r\n\r\nexport const createAltFromRelevantText = (\r\n  image: HTMLElement,\r\n): string | null => {\r\n  // Case: generate alt from figcaption\r\n  const figureElement = image.closest('figure');\r\n  if (figureElement) {\r\n    const figcaptionElement = Array.from(figureElement.children).find(\r\n      (childElement) => childElement.tagName.toLowerCase() === 'figcaption',\r\n    );\r\n\r\n    if (figcaptionElement) {\r\n      const figcaptionText = removeNewlinesSpaces(\r\n        figcaptionElement.textContent as string,\r\n      );\r\n\r\n      if (figcaptionText && !isExistingAltInvalid(figcaptionText))\r\n        return figcaptionText;\r\n    }\r\n  }\r\n\r\n  // Case: generate alt from image css classes or id\r\n  const imageCssClasses: string = [].slice.call(image.classList).join(' ');\r\n  const imageId = image.id || '';\r\n  const combinedAttributesText = imageCssClasses + imageId;\r\n  const altFromAttributes = searchInAttributesDictionary(\r\n    combinedAttributesText,\r\n  );\r\n  if (altFromAttributes) return altFromAttributes;\r\n\r\n  // Case: generate alt from surrounding text nodes, including ancestors\r\n  const altFromClosestText = getAltFromClosestTextNode(image);\r\n  if (altFromClosestText) return altFromClosestText;\r\n\r\n  return null;\r\n};\r\n","import { ATTRIBUTES_DICTIONARY } from '../constants';\r\n\r\nexport const searchInAttributesDictionary = (str: string): string | null => {\r\n  if (!str.trim()) return null;\r\n\r\n  const altFromDictionary = ATTRIBUTES_DICTIONARY.find((word) =>\r\n    str.includes(word),\r\n  );\r\n\r\n  return altFromDictionary || null;\r\n};\r\n","import { stripUrlParameters } from '../../../../utils/strip-url-parameters';\nimport {\n  GetImageAltDirective,\n  GetMissingAltsRequest,\n  ImageInfo,\n} from '../types';\nimport { shouldBeDecorative } from './should-be-decorative';\nimport { getImageSource } from './image-utils';\nimport { isExistingAltInvalid } from './is-existing-alt-invalid';\nimport { ImageAltConfig } from '../../../config/config';\nimport { createAltFromRelevantText } from '../create-alt-from-relevant-text';\n\nexport const missingAltsComparator = <T extends { src: string }>(\n  a: T,\n  b: T,\n): number => a.src.localeCompare(b.src);\n\nexport const prepareMissingAltData = (elements: HTMLElement[]): ImageInfo[] => {\n  const images = elements as HTMLImageElement[];\n\n  const result = images\n    // remove duplicates\n    .filter(\n      (image, index) =>\n        index ===\n        images.findIndex(\n          (elem) => getImageSource(image) === getImageSource(elem),\n        ),\n    )\n    .map((image) => {\n      const imageElement = image as HTMLImageElement;\n      const imageAlt = imageElement.alt.trim();\n      const hasCorrectAlt = imageAlt && !isExistingAltInvalid(imageAlt);\n      const imageSrc = getImageSource(imageElement);\n\n      return {\n        src: stripUrlParameters(imageSrc),\n        alt: imageElement.alt.trim(),\n        dir:\n          hasCorrectAlt ||\n          shouldBeDecorative(imageElement) ||\n          createAltFromRelevantText(imageElement)\n            ? GetImageAltDirective.RO\n            : undefined,\n      };\n    });\n\n  // for caching request\n  result.sort(missingAltsComparator);\n  return result;\n};\n\nexport const splitIntoChunks = <T>(array: T[], chunksAmount: number): T[][] => {\n  const chunkSize = Math.ceil(array.length / chunksAmount);\n  const result = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    result.push(array.slice(i, i + chunkSize));\n  }\n  return result;\n};\n\nconst getJsonKbSize = (json: string): number => {\n  // const size = new TextEncoder().encode(json).length;\n  const size = encodeURIComponent(json).length;\n  return size / 1024;\n};\n\nconst MAX_JSON_SIZE_KB = 8;\nconst MAX_SPLIT_LEVEL = 15;\n\nexport const imageInfoToJson = (\n  imageInfoList: ImageInfo[],\n  splitLevel: number = 1,\n): string[] => {\n  if (splitLevel >= MAX_SPLIT_LEVEL) {\n    console.warn('Max split level exceed');\n    return [];\n  }\n\n  const splitedList = splitIntoChunks(imageInfoList, splitLevel);\n\n  const result: string[] = [];\n\n  for (const chunk of splitedList) {\n    const data: GetMissingAltsRequest = {\n      sorted: chunk,\n      tier: ImageAltConfig.tier,\n    };\n    const jsonData = JSON.stringify(data);\n\n    if (getJsonKbSize(jsonData) > MAX_JSON_SIZE_KB) {\n      return imageInfoToJson(imageInfoList, splitLevel + 1);\n    }\n\n    result.push(jsonData);\n  }\n\n  return result;\n};\n","import { MIN_IMAGE_SIZE_FOR_PROCESSING } from '../constants';\r\nimport {\r\n  getImageSource,\r\n  getImageSrcGroupName,\r\n  hasMinAllowedSize,\r\n} from './image-utils';\r\nimport { isImageSizeDetectable } from './is-image-size-detectable';\r\n\r\nexport const isThirdPartyTechImage = (\r\n  image: HTMLImageElement,\r\n  majorityGroupName: string,\r\n): boolean => {\r\n  if (!isImageSizeDetectable(image)) return false;\r\n\r\n  const imageSrc = getImageSource(image);\r\n  const groupName = getImageSrcGroupName(imageSrc);\r\n\r\n  return (\r\n    groupName !== majorityGroupName &&\r\n    !hasMinAllowedSize(image, MIN_IMAGE_SIZE_FOR_PROCESSING)\r\n  );\r\n};\r\n","import { debounce } from 'lodash-es';\nimport { normalizeSrc } from '@uw/utils';\nimport { RuleParams } from '../../../types/remediation-rule';\nimport { ImageAltConfig } from '../../config/config';\nimport {\n  getImageSource,\n  getPageImagesMajorityGroup,\n} from './utils/image-utils';\nimport {\n  IMG_ALTS_DEBOUNCE_MAX_TIME,\n  IMG_ALTS_DEBOUNCE_TIME,\n  SHOW_IN_WIDGET_REMEDIATION_LIST,\n} from './constants';\nimport { getMissingAlts } from '../../api/missing-alt';\nimport {\n  imageInfoToJson,\n  prepareMissingAltData,\n} from './utils/prepare-missing-alt-data';\nimport { processImages } from './utils/process-images';\nimport { shouldBeDecorative } from './utils/should-be-decorative';\nimport { createAltFromRelevantText } from './create-alt-from-relevant-text';\nimport {\n  addRelevantTextToStorage,\n  clearRelevantTextStorage,\n} from './utils/relevant-text-storage';\nimport { isThirdPartyTechImage } from './utils/is-third-party-tech-image';\n\nconst imagesQueue: HTMLElement[] = [];\n\nconst clearImagesQueue = (): void => {\n  imagesQueue.length = 0;\n};\n\nexport const imageAltRule = (elements: HTMLElement[]): void => {\n  if (!ImageAltConfig) {\n    return;\n  }\n\n  const { state } = ImageAltConfig;\n  if (state === 'ALTS_OFF') {\n    return;\n  }\n\n  const imgMajorityGroup = getPageImagesMajorityGroup(\n    elements as HTMLImageElement[],\n  );\n\n  const imagesForBE: HTMLImageElement[] = [];\n  const imagesNotForBE: HTMLImageElement[] = [];\n\n  for (const image of elements) {\n    const imageEl = image as HTMLImageElement;\n    const isThirdPartyImg = isThirdPartyTechImage(imageEl, imgMajorityGroup);\n    const decorativeReason = shouldBeDecorative(imageEl);\n    const isImageHasDecorativeReasonNotForBE =\n      decorativeReason &&\n      !SHOW_IN_WIDGET_REMEDIATION_LIST.includes(decorativeReason);\n    const isImageNotForBE =\n      isImageHasDecorativeReasonNotForBE || isThirdPartyImg;\n\n    let altFromRelevantText: string | null = null;\n    if (!isImageNotForBE) {\n      altFromRelevantText = createAltFromRelevantText(imageEl);\n    }\n\n    if (isImageNotForBE) {\n      imagesNotForBE.push(imageEl);\n    } else if (altFromRelevantText) {\n      // we store relevant text to get it when processign images\n      addRelevantTextToStorage(imageEl, altFromRelevantText);\n      imagesNotForBE.push(imageEl);\n    } else {\n      imagesForBE.push(imageEl);\n    }\n  }\n\n  try {\n    const imagesList = prepareMissingAltData(imagesForBE);\n    const jsonImagesData = imageInfoToJson(imagesList);\n\n    if (jsonImagesData.length) {\n      for (const json of jsonImagesData) {\n        getMissingAlts(json).then((info) => {\n          if (!info) {\n            return;\n          }\n\n          const { missingAlts } = info;\n          const imagesToProcess = imagesForBE.filter((image) =>\n            missingAlts.find(\n              (item) =>\n                normalizeSrc(item.src) === normalizeSrc(getImageSource(image)),\n            ),\n          );\n          processImages(imagesToProcess, missingAlts);\n        });\n      }\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  processImages(imagesNotForBE as HTMLImageElement[]);\n  clearImagesQueue();\n  clearRelevantTextStorage();\n};\n\nconst debouncedAltRule = debounce(\n  (elements): void => imageAltRule(elements),\n  IMG_ALTS_DEBOUNCE_TIME,\n  {\n    maxWait: IMG_ALTS_DEBOUNCE_MAX_TIME,\n    leading: true,\n    trailing: true,\n  },\n);\n\nexport const runImgAltRule = ({ context: { elements } }: RuleParams): void => {\n  imagesQueue.push(...elements);\n  debouncedAltRule(imagesQueue);\n};\n","import { RemediationRule } from '../../types/remediation-rule';\nimport { ImageAltRule } from '../rules/image-alt';\n\nexport const RulesList: RemediationRule[] = [ImageAltRule];\n","import { createRemediationRule } from '../rule-factory/create-remediation-rule';\nimport { IMAGE_ALT_HELPER_ID } from './constants';\nimport { imageCanBeProcessed } from './is-target-element';\nimport {\n  revertImage,\n  updateImageInDom,\n  updateImgAltsConfig,\n} from './post-message-api';\nimport { runImgAltRule } from './rule';\n\nexport const ImageAltRule = createRemediationRule({\n  ruleId: IMAGE_ALT_HELPER_ID,\n  rule: runImgAltRule,\n  isTargetElement: imageCanBeProcessed,\n  postMessageApi: {\n    'image-alt-update': updateImageInDom,\n    'image-alt-revert': revertImage,\n    'image-alt-update-config': updateImgAltsConfig,\n  },\n});\n","import { IMAGE_PROCESSED_ATTR } from './constants';\n\nexport const imageCanBeProcessed = (element: HTMLElement): boolean => {\n  const isImg = element.tagName.toLowerCase() === 'img';\n  const alreadyProcessed = element.hasAttribute(IMAGE_PROCESSED_ATTR);\n\n  if (!isImg || alreadyProcessed) {\n    return false;\n  }\n\n  const hasSrc = element.getAttribute('src');\n  const hasSrcset = element.getAttribute('srcset');\n\n  const hasSomeSrc = hasSrc ?? hasSrcset;\n\n  return !!hasSomeSrc || !!element.closest('picture');\n};\n"],"names":["EXCLUDED_TAG_NAMES","EXCLUDED_ATTRIBUTES","isNodeExcluded","node","HTMLElement","some","attr","hasAttribute","includes","nodeName","toLowerCase","mutationFilter","mutation","type","filter","call","addedNodes","target","getRemediationSettings","jsonUrl","__async","this","response","fetch","json","InitialRemediationConfig","AriaEditorValues","BrokenLink","Contrast","EmptyControls","ExternalLink","Forms","Headings","Language","MissingAlts","Pdfs","VagueLinks","RemediationConfig","UserWayWidgetApp","ContextHolder","config","remediation","TuningsConfig","tunings","ServicesConfig","services","ImageAltConfig","imageAlt","setRulesConfig","data","__spreadValues","initConfig","consolidated","reverse","PostMessageAction","PostMessageType","onPostMessage","messageType","callback","listener","event","isUserWay","action","Remediation","window","addEventListener","removeEventListener","element","document","documentElement","options","attributes","attributeFilter","childList","subtree","callbacksSet","Set","subscribeOnDomUpdates","add","observer","MutationObserver","domMutations","filteredNodes","mutations","sorted","push","prefilter","length","forEach","callbackFn","getAllElements","query","join","map","body","querySelectorAll","freeGlobal$1","global","Object","freeSelf","self","root$1","freeGlobal","Function","Symbol$2","root","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","nullTag","undefinedTag","baseGetTag","value","isOwn","tag","unmasked","e","result","getRawTag","objectToString","symbolTag","reWhitespace","reTrimStart","baseTrim","string","slice","index","test","charAt","trimmedEndIndex","replace","isObject","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","isObjectLike","isSymbol","other","valueOf","isBinary","now$1","Date","now","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","debounce","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","cancel","flush","isActivePhase","useDeferredRunner","runCallback","throttleRemediationRun","throttle","elements","debounceRemediationRun","run","isHideFromReaders","ariaHiddenAttribute","getAttribute","hiddenAttribute","getComputedStyle","display","isHidden","invalidTags","compose","children","textAppendTo","i","childNode","nodeType","Node","TEXT_NODE","_a","textContent","trim","ELEMENT_NODE","tagName","ariaHidden","alt","ariaLabel","childNodes","composeElementTextRepresentation","modifiedText","getLabelledByElements","ariaLabelledBy","ids","split","textToRead","labelEl","getElementById","hashString","str","seed","h1","h2","ch","charCodeAt","imul","xpath","isParentEl","siblingIndex","siblings","parentElement","sibling","getHashedParams","s","h","textHash","innerText","keys","reduce","key","attribute","attrValue","base64RE","RegExp","includesImgExtensionRegex","normalizeSrc","originalSrc","matches","match","substring","findParentLabel","parentEl","parentNode","findLabelForControlElement","parentLabel","id","labelByFor","labels","htmlFor","findLabelByForAttr","title","AccessibilityTreeNodeAttributeName","AccessibilityTreeWalkerNodeType","NodeSemanticType","TREE_OBSERVER_ACTION","UW_ELEMENTS_CLASSES","getTextToRead","additionalParams","accessibilityTreeWalker","getLib","treeWalkerNodeType","attributesToReturn","identifierInc","buildAccessibilityTreeNode","isTreeBuilding","isTextNode","cl","closest","isUwElement","identifyElementType","elementAttributes","UNKNOWN","NOT_ALLOWED","uwAtoId","tabindex","role","ariaLevel","getElementAttributes","hidden","HIDDEN_FOR_READER","processedElement","name","TABINDEX","ROLE","TYPE","ARIA_LEVEL","getAttributesToReturn","clone","cloneNode","removeAttribute","HAS_ALT_DESCRIPTION","checkHidden","semanticType","TEXT","parentXpath","processTextNode","COMPOSED_TEXT_NODES","LIST_ITEM","processComposedTextNode","HEADING","processHeadingNode","LANDMARK","FOOTER","HEADER","FORM","MAIN","NAV","processLandmarkNode","CONTROL","isLinkOrButton","LINK","BUTTON","CHECKBOX","RADIOBUTTON","INPUT","TEXTAREA","SELECT","processControlNode","remediationAltOriginal","attributesToReturnCopy","IMAGE","SRC","src","ORIGINAL_ALT","ABBR","processNodeWithAlt","innerHTML","processUnknownNode","label","el","nodes","generateAccessibilityTree","cursor","treeWalkerItem","getNextAccessibilityTreeNode","treeItem","__objRest","iframes","newData","__spreadProps","iframe","frames","postMessage","querySelector","contentWindow","console","error","version","processMeta","enabled","postMessageApi","delete","EXCLUDED_DOMAINS","automaticcoupons","shopperapproved","rakuten","avatar","companylogos","favicon","activecampaign","aweber","bananatag","boomerang","close","contactmonkey","convertkit","emarsys","gem","getnotify","getresponse","growthdot","front","hubspot","icontact","intercom","litmus","mailchimp","mailgun","mailjet","mailspring","mailtrack","mandrill","marketo","mixmax","mixpanel","nethunt","newton","outreach","phplist","polymail","postmark","sailthru","salesforce","sendgrid","sendy","streak","superhuman","thunderhead","tinyletter","yamm","yesware","ATTRIBUTES_DICTIONARY","CONTAINING_ALT_ELEMENTS_TAGS","CONTAINING_ALT_ELEMENTS_ROLES","BASE64_REGEXP","SVG_REGEXP","DecorativeReason","SHOW_IN_WIDGET_REMEDIATION_LIST","IMAGE_ORIGINAL_ALT_ATTR","IMAGE_ALT_HELPER_ID","IMAGE_PROCESSED_ATTR","IMAGE_EXTENSIONS","ImageProcessedResult","editorBuildUrl","remediationManager","remediationInProgress","rulesList","remediationElementsQueue","rule","onDomUpdates","init","RulesListModule","Promise","resolve","then","rulesListFree","RulesList","configKey","ruleId","getRuleConfigName","paidAi","tech_rem_on_tab","allElements","unsubscribe","KeyboardNavEnabled","createRemediationManager","REMEDIATION_TIMEOUT","tech_rem_in_throttle_ms","observe","initApp","getImageSource","currentSrc","hasMinAllowedSize","image","minSize","width","height","convertToCorrectionInfo","decorative","approved","fixedByUserWay","loadingFromMS","originalAlt","makeDecorative","setAttribute","getImageSrcGroupName","hostname","URL","err","isExistingAltInvalid","endsWithFilename","tooLong","empty","containManyNumbers","containOnlySpecialSymbols","applyCorrectionData","altsCorrections","imageElement","imageSrc","imageCorrection","find","correction","reverted","Reverted","waitingForApprove","strategy","altCanBeApplied","Backend","isImageSizeDetectable","pixelsUnitPattern","isWidthInPixels","isHeightInPixels","shouldBeDecorative","isInvalidAlt","imageHasComputedSize","url","WRONG_SRC","isImageDomainExcluded","domain","values","regRule","isExcludedDomainImage","EXCLUDED_SRC","MICRO_SIZE","widthInt","heightInt","hasWrongAspectRatio","ASPECT_RATIO","BASE64","HIDDEN_FROM_SCREEN_READER","SVG","SMALL_SIZE","getDecorativeReasonAttribute","reason","AspectRatio","Base64","Excluded","Svg","Micro","Small","InvalidSrc","Hidden","relevantTextStorage","addRelevantTextToStorage","text","imageXpath","getRelevantTextFromStorage","sendRemediationResults","corrections","fixedCount","toDoCount","legacyRemediationManager","legacyHelperOutcome","of","items","HelperCallbackAggregator","onHelperRemediationCompleted","saveRemediationResults","saveOriginalAlt","processImages","altCorrections","imageCorrectionsList","elem","decorativeReason","CorrectAlt","_b","quotaExceeded","altFromSurroundingText","ClosestText","quota","usage","AIQuotaExceed","AI","getImagesFromDom","srcWithoutProtocol","getMissingAlts","altListJson","account","siteId","resourceHash","preparedAltsData","encodeURIComponent","method","headers","payload","stripUrlParameters","imageUrlRegPattern","imageUrlRegRule","GetImageAltDirective","removeNewlinesSpaces","getSiblingNode","siblingNode","nextSibling","previousSibling","nodeValue","isAllowedNode","isElementTypeNode","isNodeHasAllowedTagname","isNodeHasAllowedRole","allowedTagNames","Array","from","getAltTextFromNode","trimmedText","altText","filterNodes","nodeItem","isTextTypeNode","unsuccessfulSearchCounter","getAltFromClosestTextNode","currentEl","getElementsByTagName","altFromSiblings","nextSiblingEl","prevSiblingEl","textFromNextTextNodeSibling","textFromPrevTextNodeSibling","altTextFromTextNode","getAltFromSiblings","createAltFromRelevantText","figureElement","figcaptionElement","childElement","figcaptionText","imageCssClasses","classList","imageId","altFromAttributes","word","altFromClosestText","missingAltsComparator","a","b","localeCompare","imageInfoToJson","imageInfoList","splitLevel","warn","splitedList","array","chunksAmount","chunkSize","ceil","splitIntoChunks","chunk","tier","jsonData","JSON","stringify","isThirdPartyTechImage","majorityGroupName","imagesQueue","imageAltRule","state","imgMajorityGroup","images","groups","img","groupName","byName","gr","weight","sort","grA","grB","getPageImagesMajorityGroup","imagesForBE","imagesNotForBE","imageEl","isThirdPartyImg","isImageNotForBE","altFromRelevantText","imagesList","findIndex","hasCorrectAlt","dir","RO","prepareMissingAltData","jsonImagesData","info","missingAlts","imagesToProcess","item","debouncedAltRule","isTargetElement","forceRun","AriaEditor","context","filteredElements","stop","rerun","createRemediationRule","isImg","alreadyProcessed","hasSrc","hasSrcset"],"mappings":"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","x_google_ignoreList":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,25]}